
interrupt_config_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c68  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08000df0  08000df0  00001df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e1c  08000e1c  00002068  2**0
                  CONTENTS
  4 .ARM          00000000  08000e1c  08000e1c  00002068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000e1c  08000e1c  00002068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e1c  08000e1c  00001e1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e20  08000e20  00001e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08000e24  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002068  2**0
                  CONTENTS
 10 .bss          0000016c  20000068  20000068  00002068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  00002068  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009dc  00000000  00000000  00002092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000036f  00000000  00000000  00002a6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000130  00000000  00000000  00002de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000d0  00000000  00000000  00002f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002cca  00000000  00000000  00002fe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000014a5  00000000  00000000  00005caa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000981f  00000000  00000000  0000714f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0001096e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a30  00000000  00000000  000109b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  000113e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000dd8 	.word	0x08000dd8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	08000dd8 	.word	0x08000dd8

080001c8 <configure_priority_for_irqs>:
uint32_t *pNVIC_ISERBase = (uint32_t*)0xE000E100;
uint32_t *pNVIC_ISPRBase = (uint32_t*)0XE000E200;


void configure_priority_for_irqs(uint8_t irq_no, uint8_t priority_value)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b087      	sub	sp, #28
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	460a      	mov	r2, r1
 80001d2:	71fb      	strb	r3, [r7, #7]
 80001d4:	4613      	mov	r3, r2
 80001d6:	71bb      	strb	r3, [r7, #6]
	//1. find out iprx
	uint8_t iprx = irq_no / 4;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	089b      	lsrs	r3, r3, #2
 80001dc:	75fb      	strb	r3, [r7, #23]
	uint32_t *ipr =  pNVIC_IPRBase+iprx;
 80001de:	4b12      	ldr	r3, [pc, #72]	@ (8000228 <configure_priority_for_irqs+0x60>)
 80001e0:	681a      	ldr	r2, [r3, #0]
 80001e2:	7dfb      	ldrb	r3, [r7, #23]
 80001e4:	009b      	lsls	r3, r3, #2
 80001e6:	4413      	add	r3, r2
 80001e8:	613b      	str	r3, [r7, #16]

	//2. position in iprx
	uint8_t pos = (irq_no % 4) * 8;
 80001ea:	79fb      	ldrb	r3, [r7, #7]
 80001ec:	f003 0303 	and.w	r3, r3, #3
 80001f0:	b2db      	uxtb	r3, r3
 80001f2:	00db      	lsls	r3, r3, #3
 80001f4:	73fb      	strb	r3, [r7, #15]

	//3. configure the priority
	*ipr &= ~(0xFF << pos);//clear
 80001f6:	693b      	ldr	r3, [r7, #16]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	7bfa      	ldrb	r2, [r7, #15]
 80001fc:	21ff      	movs	r1, #255	@ 0xff
 80001fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000202:	43d2      	mvns	r2, r2
 8000204:	401a      	ands	r2, r3
 8000206:	693b      	ldr	r3, [r7, #16]
 8000208:	601a      	str	r2, [r3, #0]
	*ipr |=  (priority_value << pos);
 800020a:	693b      	ldr	r3, [r7, #16]
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	79b9      	ldrb	r1, [r7, #6]
 8000210:	7bfa      	ldrb	r2, [r7, #15]
 8000212:	fa01 f202 	lsl.w	r2, r1, r2
 8000216:	431a      	orrs	r2, r3
 8000218:	693b      	ldr	r3, [r7, #16]
 800021a:	601a      	str	r2, [r3, #0]

}
 800021c:	bf00      	nop
 800021e:	371c      	adds	r7, #28
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	20000000 	.word	0x20000000

0800022c <main>:

int main(void)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	af00      	add	r7, sp, #0
	//1. Lets configure the priority for the peripherals
	 configure_priority_for_irqs(IRQNO_TIMER2,0x80);
 8000230:	2180      	movs	r1, #128	@ 0x80
 8000232:	201c      	movs	r0, #28
 8000234:	f7ff ffc8 	bl	80001c8 <configure_priority_for_irqs>
	 configure_priority_for_irqs(IRQNO_I2C1,0x70);
 8000238:	2170      	movs	r1, #112	@ 0x70
 800023a:	201f      	movs	r0, #31
 800023c:	f7ff ffc4 	bl	80001c8 <configure_priority_for_irqs>

	//2. Set the interrupt pending bit in the NVIC PR
	// *pNVIC_ISPRBase |= ( 1 << IRQNO_TIMER2);

	//3. Enable the IRQs in NVIC ISER
	 *pNVIC_ISERBase |= ( 1 << IRQNO_I2C1);
 8000240:	4b09      	ldr	r3, [pc, #36]	@ (8000268 <main+0x3c>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	4b08      	ldr	r3, [pc, #32]	@ (8000268 <main+0x3c>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800024e:	601a      	str	r2, [r3, #0]
	 *pNVIC_ISERBase |= ( 1 << IRQNO_TIMER2);
 8000250:	4b05      	ldr	r3, [pc, #20]	@ (8000268 <main+0x3c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	681a      	ldr	r2, [r3, #0]
 8000256:	4b04      	ldr	r3, [pc, #16]	@ (8000268 <main+0x3c>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800025e:	601a      	str	r2, [r3, #0]
 8000260:	2300      	movs	r3, #0


}
 8000262:	4618      	mov	r0, r3
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	20000004 	.word	0x20000004

0800026c <TIM2_IRQHandler>:

//isrs

void TIM2_IRQHandler(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
  printf("[TIM2_IRQHandler]\n");
 8000270:	4806      	ldr	r0, [pc, #24]	@ (800028c <TIM2_IRQHandler+0x20>)
 8000272:	f000 fa21 	bl	80006b8 <puts>
  /*Here, we are pending I2C interrupt request manually */
  *pNVIC_ISPRBase |= ( 1 << IRQNO_I2C1);
 8000276:	4b06      	ldr	r3, [pc, #24]	@ (8000290 <TIM2_IRQHandler+0x24>)
 8000278:	681b      	ldr	r3, [r3, #0]
 800027a:	681a      	ldr	r2, [r3, #0]
 800027c:	4b04      	ldr	r3, [pc, #16]	@ (8000290 <TIM2_IRQHandler+0x24>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8000284:	601a      	str	r2, [r3, #0]
  while(1);
 8000286:	bf00      	nop
 8000288:	e7fd      	b.n	8000286 <TIM2_IRQHandler+0x1a>
 800028a:	bf00      	nop
 800028c:	08000df0 	.word	0x08000df0
 8000290:	20000008 	.word	0x20000008

08000294 <I2C1_EV_IRQHandler>:

}


void I2C1_EV_IRQHandler(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  printf("[I2C1_EV_IRQHandler]\n");
 8000298:	4802      	ldr	r0, [pc, #8]	@ (80002a4 <I2C1_EV_IRQHandler+0x10>)
 800029a:	f000 fa0d 	bl	80006b8 <puts>
}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	08000e04 	.word	0x08000e04

080002a8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80002b2:	4b0e      	ldr	r3, [pc, #56]	@ (80002ec <ITM_SendChar+0x44>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	4a0d      	ldr	r2, [pc, #52]	@ (80002ec <ITM_SendChar+0x44>)
 80002b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80002bc:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80002be:	4b0c      	ldr	r3, [pc, #48]	@ (80002f0 <ITM_SendChar+0x48>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a0b      	ldr	r2, [pc, #44]	@ (80002f0 <ITM_SendChar+0x48>)
 80002c4:	f043 0301 	orr.w	r3, r3, #1
 80002c8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80002ca:	bf00      	nop
 80002cc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	f003 0301 	and.w	r3, r3, #1
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d0f8      	beq.n	80002cc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80002da:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80002de:	79fb      	ldrb	r3, [r7, #7]
 80002e0:	6013      	str	r3, [r2, #0]
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	bc80      	pop	{r7}
 80002ea:	4770      	bx	lr
 80002ec:	e000edfc 	.word	0xe000edfc
 80002f0:	e0000e00 	.word	0xe0000e00

080002f4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b086      	sub	sp, #24
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	60f8      	str	r0, [r7, #12]
 80002fc:	60b9      	str	r1, [r7, #8]
 80002fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000300:	2300      	movs	r3, #0
 8000302:	617b      	str	r3, [r7, #20]
 8000304:	e00a      	b.n	800031c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000306:	f3af 8000 	nop.w
 800030a:	4601      	mov	r1, r0
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	1c5a      	adds	r2, r3, #1
 8000310:	60ba      	str	r2, [r7, #8]
 8000312:	b2ca      	uxtb	r2, r1
 8000314:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	3301      	adds	r3, #1
 800031a:	617b      	str	r3, [r7, #20]
 800031c:	697a      	ldr	r2, [r7, #20]
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	429a      	cmp	r2, r3
 8000322:	dbf0      	blt.n	8000306 <_read+0x12>
  }

  return len;
 8000324:	687b      	ldr	r3, [r7, #4]
}
 8000326:	4618      	mov	r0, r3
 8000328:	3718      	adds	r7, #24
 800032a:	46bd      	mov	sp, r7
 800032c:	bd80      	pop	{r7, pc}

0800032e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800032e:	b580      	push	{r7, lr}
 8000330:	b086      	sub	sp, #24
 8000332:	af00      	add	r7, sp, #0
 8000334:	60f8      	str	r0, [r7, #12]
 8000336:	60b9      	str	r1, [r7, #8]
 8000338:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]
 800033e:	e009      	b.n	8000354 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000340:	68bb      	ldr	r3, [r7, #8]
 8000342:	1c5a      	adds	r2, r3, #1
 8000344:	60ba      	str	r2, [r7, #8]
 8000346:	781b      	ldrb	r3, [r3, #0]
 8000348:	4618      	mov	r0, r3
 800034a:	f7ff ffad 	bl	80002a8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800034e:	697b      	ldr	r3, [r7, #20]
 8000350:	3301      	adds	r3, #1
 8000352:	617b      	str	r3, [r7, #20]
 8000354:	697a      	ldr	r2, [r7, #20]
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	429a      	cmp	r2, r3
 800035a:	dbf1      	blt.n	8000340 <_write+0x12>
  }
  return len;
 800035c:	687b      	ldr	r3, [r7, #4]
}
 800035e:	4618      	mov	r0, r3
 8000360:	3718      	adds	r7, #24
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}

08000366 <_close>:

int _close(int file)
{
 8000366:	b480      	push	{r7}
 8000368:	b083      	sub	sp, #12
 800036a:	af00      	add	r7, sp, #0
 800036c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800036e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000372:	4618      	mov	r0, r3
 8000374:	370c      	adds	r7, #12
 8000376:	46bd      	mov	sp, r7
 8000378:	bc80      	pop	{r7}
 800037a:	4770      	bx	lr

0800037c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
 8000384:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800038c:	605a      	str	r2, [r3, #4]
  return 0;
 800038e:	2300      	movs	r3, #0
}
 8000390:	4618      	mov	r0, r3
 8000392:	370c      	adds	r7, #12
 8000394:	46bd      	mov	sp, r7
 8000396:	bc80      	pop	{r7}
 8000398:	4770      	bx	lr

0800039a <_isatty>:

int _isatty(int file)
{
 800039a:	b480      	push	{r7}
 800039c:	b083      	sub	sp, #12
 800039e:	af00      	add	r7, sp, #0
 80003a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80003a2:	2301      	movs	r3, #1
}
 80003a4:	4618      	mov	r0, r3
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	bc80      	pop	{r7}
 80003ac:	4770      	bx	lr

080003ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80003ae:	b480      	push	{r7}
 80003b0:	b085      	sub	sp, #20
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	60f8      	str	r0, [r7, #12]
 80003b6:	60b9      	str	r1, [r7, #8]
 80003b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80003ba:	2300      	movs	r3, #0
}
 80003bc:	4618      	mov	r0, r3
 80003be:	3714      	adds	r7, #20
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bc80      	pop	{r7}
 80003c4:	4770      	bx	lr
	...

080003c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b086      	sub	sp, #24
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003d0:	4a14      	ldr	r2, [pc, #80]	@ (8000424 <_sbrk+0x5c>)
 80003d2:	4b15      	ldr	r3, [pc, #84]	@ (8000428 <_sbrk+0x60>)
 80003d4:	1ad3      	subs	r3, r2, r3
 80003d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003d8:	697b      	ldr	r3, [r7, #20]
 80003da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003dc:	4b13      	ldr	r3, [pc, #76]	@ (800042c <_sbrk+0x64>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d102      	bne.n	80003ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003e4:	4b11      	ldr	r3, [pc, #68]	@ (800042c <_sbrk+0x64>)
 80003e6:	4a12      	ldr	r2, [pc, #72]	@ (8000430 <_sbrk+0x68>)
 80003e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003ea:	4b10      	ldr	r3, [pc, #64]	@ (800042c <_sbrk+0x64>)
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4413      	add	r3, r2
 80003f2:	693a      	ldr	r2, [r7, #16]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	d207      	bcs.n	8000408 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003f8:	f000 fa8c 	bl	8000914 <__errno>
 80003fc:	4603      	mov	r3, r0
 80003fe:	220c      	movs	r2, #12
 8000400:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000402:	f04f 33ff 	mov.w	r3, #4294967295
 8000406:	e009      	b.n	800041c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000408:	4b08      	ldr	r3, [pc, #32]	@ (800042c <_sbrk+0x64>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800040e:	4b07      	ldr	r3, [pc, #28]	@ (800042c <_sbrk+0x64>)
 8000410:	681a      	ldr	r2, [r3, #0]
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4413      	add	r3, r2
 8000416:	4a05      	ldr	r2, [pc, #20]	@ (800042c <_sbrk+0x64>)
 8000418:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800041a:	68fb      	ldr	r3, [r7, #12]
}
 800041c:	4618      	mov	r0, r3
 800041e:	3718      	adds	r7, #24
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	20020000 	.word	0x20020000
 8000428:	00000400 	.word	0x00000400
 800042c:	20000084 	.word	0x20000084
 8000430:	200001d8 	.word	0x200001d8

08000434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000434:	480d      	ldr	r0, [pc, #52]	@ (800046c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000436:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000438:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800043c:	480c      	ldr	r0, [pc, #48]	@ (8000470 <LoopForever+0x6>)
  ldr r1, =_edata
 800043e:	490d      	ldr	r1, [pc, #52]	@ (8000474 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000440:	4a0d      	ldr	r2, [pc, #52]	@ (8000478 <LoopForever+0xe>)
  movs r3, #0
 8000442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000444:	e002      	b.n	800044c <LoopCopyDataInit>

08000446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800044a:	3304      	adds	r3, #4

0800044c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800044c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000450:	d3f9      	bcc.n	8000446 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000452:	4a0a      	ldr	r2, [pc, #40]	@ (800047c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000454:	4c0a      	ldr	r4, [pc, #40]	@ (8000480 <LoopForever+0x16>)
  movs r3, #0
 8000456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000458:	e001      	b.n	800045e <LoopFillZerobss>

0800045a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800045a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800045c:	3204      	adds	r2, #4

0800045e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000460:	d3fb      	bcc.n	800045a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000462:	f000 fa5d 	bl	8000920 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000466:	f7ff fee1 	bl	800022c <main>

0800046a <LoopForever>:

LoopForever:
  b LoopForever
 800046a:	e7fe      	b.n	800046a <LoopForever>
  ldr   r0, =_estack
 800046c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000478:	08000e24 	.word	0x08000e24
  ldr r2, =_sbss
 800047c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000480:	200001d4 	.word	0x200001d4

08000484 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC_IRQHandler>
	...

08000488 <std>:
 8000488:	2300      	movs	r3, #0
 800048a:	b510      	push	{r4, lr}
 800048c:	4604      	mov	r4, r0
 800048e:	e9c0 3300 	strd	r3, r3, [r0]
 8000492:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000496:	6083      	str	r3, [r0, #8]
 8000498:	8181      	strh	r1, [r0, #12]
 800049a:	6643      	str	r3, [r0, #100]	@ 0x64
 800049c:	81c2      	strh	r2, [r0, #14]
 800049e:	6183      	str	r3, [r0, #24]
 80004a0:	4619      	mov	r1, r3
 80004a2:	2208      	movs	r2, #8
 80004a4:	305c      	adds	r0, #92	@ 0x5c
 80004a6:	f000 f9e7 	bl	8000878 <memset>
 80004aa:	4b0d      	ldr	r3, [pc, #52]	@ (80004e0 <std+0x58>)
 80004ac:	6263      	str	r3, [r4, #36]	@ 0x24
 80004ae:	4b0d      	ldr	r3, [pc, #52]	@ (80004e4 <std+0x5c>)
 80004b0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80004b2:	4b0d      	ldr	r3, [pc, #52]	@ (80004e8 <std+0x60>)
 80004b4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80004b6:	4b0d      	ldr	r3, [pc, #52]	@ (80004ec <std+0x64>)
 80004b8:	6323      	str	r3, [r4, #48]	@ 0x30
 80004ba:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <std+0x68>)
 80004bc:	6224      	str	r4, [r4, #32]
 80004be:	429c      	cmp	r4, r3
 80004c0:	d006      	beq.n	80004d0 <std+0x48>
 80004c2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80004c6:	4294      	cmp	r4, r2
 80004c8:	d002      	beq.n	80004d0 <std+0x48>
 80004ca:	33d0      	adds	r3, #208	@ 0xd0
 80004cc:	429c      	cmp	r4, r3
 80004ce:	d105      	bne.n	80004dc <std+0x54>
 80004d0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80004d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80004d8:	f000 ba46 	b.w	8000968 <__retarget_lock_init_recursive>
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	bf00      	nop
 80004e0:	080006c9 	.word	0x080006c9
 80004e4:	080006eb 	.word	0x080006eb
 80004e8:	08000723 	.word	0x08000723
 80004ec:	08000747 	.word	0x08000747
 80004f0:	20000088 	.word	0x20000088

080004f4 <stdio_exit_handler>:
 80004f4:	4a02      	ldr	r2, [pc, #8]	@ (8000500 <stdio_exit_handler+0xc>)
 80004f6:	4903      	ldr	r1, [pc, #12]	@ (8000504 <stdio_exit_handler+0x10>)
 80004f8:	4803      	ldr	r0, [pc, #12]	@ (8000508 <stdio_exit_handler+0x14>)
 80004fa:	f000 b869 	b.w	80005d0 <_fwalk_sglue>
 80004fe:	bf00      	nop
 8000500:	2000000c 	.word	0x2000000c
 8000504:	08000c61 	.word	0x08000c61
 8000508:	2000001c 	.word	0x2000001c

0800050c <cleanup_stdio>:
 800050c:	6841      	ldr	r1, [r0, #4]
 800050e:	4b0c      	ldr	r3, [pc, #48]	@ (8000540 <cleanup_stdio+0x34>)
 8000510:	4299      	cmp	r1, r3
 8000512:	b510      	push	{r4, lr}
 8000514:	4604      	mov	r4, r0
 8000516:	d001      	beq.n	800051c <cleanup_stdio+0x10>
 8000518:	f000 fba2 	bl	8000c60 <_fflush_r>
 800051c:	68a1      	ldr	r1, [r4, #8]
 800051e:	4b09      	ldr	r3, [pc, #36]	@ (8000544 <cleanup_stdio+0x38>)
 8000520:	4299      	cmp	r1, r3
 8000522:	d002      	beq.n	800052a <cleanup_stdio+0x1e>
 8000524:	4620      	mov	r0, r4
 8000526:	f000 fb9b 	bl	8000c60 <_fflush_r>
 800052a:	68e1      	ldr	r1, [r4, #12]
 800052c:	4b06      	ldr	r3, [pc, #24]	@ (8000548 <cleanup_stdio+0x3c>)
 800052e:	4299      	cmp	r1, r3
 8000530:	d004      	beq.n	800053c <cleanup_stdio+0x30>
 8000532:	4620      	mov	r0, r4
 8000534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000538:	f000 bb92 	b.w	8000c60 <_fflush_r>
 800053c:	bd10      	pop	{r4, pc}
 800053e:	bf00      	nop
 8000540:	20000088 	.word	0x20000088
 8000544:	200000f0 	.word	0x200000f0
 8000548:	20000158 	.word	0x20000158

0800054c <global_stdio_init.part.0>:
 800054c:	b510      	push	{r4, lr}
 800054e:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <global_stdio_init.part.0+0x30>)
 8000550:	4c0b      	ldr	r4, [pc, #44]	@ (8000580 <global_stdio_init.part.0+0x34>)
 8000552:	4a0c      	ldr	r2, [pc, #48]	@ (8000584 <global_stdio_init.part.0+0x38>)
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	4620      	mov	r0, r4
 8000558:	2200      	movs	r2, #0
 800055a:	2104      	movs	r1, #4
 800055c:	f7ff ff94 	bl	8000488 <std>
 8000560:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000564:	2201      	movs	r2, #1
 8000566:	2109      	movs	r1, #9
 8000568:	f7ff ff8e 	bl	8000488 <std>
 800056c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000570:	2202      	movs	r2, #2
 8000572:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000576:	2112      	movs	r1, #18
 8000578:	f7ff bf86 	b.w	8000488 <std>
 800057c:	200001c0 	.word	0x200001c0
 8000580:	20000088 	.word	0x20000088
 8000584:	080004f5 	.word	0x080004f5

08000588 <__sfp_lock_acquire>:
 8000588:	4801      	ldr	r0, [pc, #4]	@ (8000590 <__sfp_lock_acquire+0x8>)
 800058a:	f000 b9ee 	b.w	800096a <__retarget_lock_acquire_recursive>
 800058e:	bf00      	nop
 8000590:	200001c9 	.word	0x200001c9

08000594 <__sfp_lock_release>:
 8000594:	4801      	ldr	r0, [pc, #4]	@ (800059c <__sfp_lock_release+0x8>)
 8000596:	f000 b9e9 	b.w	800096c <__retarget_lock_release_recursive>
 800059a:	bf00      	nop
 800059c:	200001c9 	.word	0x200001c9

080005a0 <__sinit>:
 80005a0:	b510      	push	{r4, lr}
 80005a2:	4604      	mov	r4, r0
 80005a4:	f7ff fff0 	bl	8000588 <__sfp_lock_acquire>
 80005a8:	6a23      	ldr	r3, [r4, #32]
 80005aa:	b11b      	cbz	r3, 80005b4 <__sinit+0x14>
 80005ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005b0:	f7ff bff0 	b.w	8000594 <__sfp_lock_release>
 80005b4:	4b04      	ldr	r3, [pc, #16]	@ (80005c8 <__sinit+0x28>)
 80005b6:	6223      	str	r3, [r4, #32]
 80005b8:	4b04      	ldr	r3, [pc, #16]	@ (80005cc <__sinit+0x2c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d1f5      	bne.n	80005ac <__sinit+0xc>
 80005c0:	f7ff ffc4 	bl	800054c <global_stdio_init.part.0>
 80005c4:	e7f2      	b.n	80005ac <__sinit+0xc>
 80005c6:	bf00      	nop
 80005c8:	0800050d 	.word	0x0800050d
 80005cc:	200001c0 	.word	0x200001c0

080005d0 <_fwalk_sglue>:
 80005d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005d4:	4607      	mov	r7, r0
 80005d6:	4688      	mov	r8, r1
 80005d8:	4614      	mov	r4, r2
 80005da:	2600      	movs	r6, #0
 80005dc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80005e0:	f1b9 0901 	subs.w	r9, r9, #1
 80005e4:	d505      	bpl.n	80005f2 <_fwalk_sglue+0x22>
 80005e6:	6824      	ldr	r4, [r4, #0]
 80005e8:	2c00      	cmp	r4, #0
 80005ea:	d1f7      	bne.n	80005dc <_fwalk_sglue+0xc>
 80005ec:	4630      	mov	r0, r6
 80005ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80005f2:	89ab      	ldrh	r3, [r5, #12]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d907      	bls.n	8000608 <_fwalk_sglue+0x38>
 80005f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80005fc:	3301      	adds	r3, #1
 80005fe:	d003      	beq.n	8000608 <_fwalk_sglue+0x38>
 8000600:	4629      	mov	r1, r5
 8000602:	4638      	mov	r0, r7
 8000604:	47c0      	blx	r8
 8000606:	4306      	orrs	r6, r0
 8000608:	3568      	adds	r5, #104	@ 0x68
 800060a:	e7e9      	b.n	80005e0 <_fwalk_sglue+0x10>

0800060c <_puts_r>:
 800060c:	6a03      	ldr	r3, [r0, #32]
 800060e:	b570      	push	{r4, r5, r6, lr}
 8000610:	6884      	ldr	r4, [r0, #8]
 8000612:	4605      	mov	r5, r0
 8000614:	460e      	mov	r6, r1
 8000616:	b90b      	cbnz	r3, 800061c <_puts_r+0x10>
 8000618:	f7ff ffc2 	bl	80005a0 <__sinit>
 800061c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800061e:	07db      	lsls	r3, r3, #31
 8000620:	d405      	bmi.n	800062e <_puts_r+0x22>
 8000622:	89a3      	ldrh	r3, [r4, #12]
 8000624:	0598      	lsls	r0, r3, #22
 8000626:	d402      	bmi.n	800062e <_puts_r+0x22>
 8000628:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800062a:	f000 f99e 	bl	800096a <__retarget_lock_acquire_recursive>
 800062e:	89a3      	ldrh	r3, [r4, #12]
 8000630:	0719      	lsls	r1, r3, #28
 8000632:	d502      	bpl.n	800063a <_puts_r+0x2e>
 8000634:	6923      	ldr	r3, [r4, #16]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d135      	bne.n	80006a6 <_puts_r+0x9a>
 800063a:	4621      	mov	r1, r4
 800063c:	4628      	mov	r0, r5
 800063e:	f000 f8c5 	bl	80007cc <__swsetup_r>
 8000642:	b380      	cbz	r0, 80006a6 <_puts_r+0x9a>
 8000644:	f04f 35ff 	mov.w	r5, #4294967295
 8000648:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800064a:	07da      	lsls	r2, r3, #31
 800064c:	d405      	bmi.n	800065a <_puts_r+0x4e>
 800064e:	89a3      	ldrh	r3, [r4, #12]
 8000650:	059b      	lsls	r3, r3, #22
 8000652:	d402      	bmi.n	800065a <_puts_r+0x4e>
 8000654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000656:	f000 f989 	bl	800096c <__retarget_lock_release_recursive>
 800065a:	4628      	mov	r0, r5
 800065c:	bd70      	pop	{r4, r5, r6, pc}
 800065e:	2b00      	cmp	r3, #0
 8000660:	da04      	bge.n	800066c <_puts_r+0x60>
 8000662:	69a2      	ldr	r2, [r4, #24]
 8000664:	429a      	cmp	r2, r3
 8000666:	dc17      	bgt.n	8000698 <_puts_r+0x8c>
 8000668:	290a      	cmp	r1, #10
 800066a:	d015      	beq.n	8000698 <_puts_r+0x8c>
 800066c:	6823      	ldr	r3, [r4, #0]
 800066e:	1c5a      	adds	r2, r3, #1
 8000670:	6022      	str	r2, [r4, #0]
 8000672:	7019      	strb	r1, [r3, #0]
 8000674:	68a3      	ldr	r3, [r4, #8]
 8000676:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800067a:	3b01      	subs	r3, #1
 800067c:	60a3      	str	r3, [r4, #8]
 800067e:	2900      	cmp	r1, #0
 8000680:	d1ed      	bne.n	800065e <_puts_r+0x52>
 8000682:	2b00      	cmp	r3, #0
 8000684:	da11      	bge.n	80006aa <_puts_r+0x9e>
 8000686:	4622      	mov	r2, r4
 8000688:	210a      	movs	r1, #10
 800068a:	4628      	mov	r0, r5
 800068c:	f000 f85f 	bl	800074e <__swbuf_r>
 8000690:	3001      	adds	r0, #1
 8000692:	d0d7      	beq.n	8000644 <_puts_r+0x38>
 8000694:	250a      	movs	r5, #10
 8000696:	e7d7      	b.n	8000648 <_puts_r+0x3c>
 8000698:	4622      	mov	r2, r4
 800069a:	4628      	mov	r0, r5
 800069c:	f000 f857 	bl	800074e <__swbuf_r>
 80006a0:	3001      	adds	r0, #1
 80006a2:	d1e7      	bne.n	8000674 <_puts_r+0x68>
 80006a4:	e7ce      	b.n	8000644 <_puts_r+0x38>
 80006a6:	3e01      	subs	r6, #1
 80006a8:	e7e4      	b.n	8000674 <_puts_r+0x68>
 80006aa:	6823      	ldr	r3, [r4, #0]
 80006ac:	1c5a      	adds	r2, r3, #1
 80006ae:	6022      	str	r2, [r4, #0]
 80006b0:	220a      	movs	r2, #10
 80006b2:	701a      	strb	r2, [r3, #0]
 80006b4:	e7ee      	b.n	8000694 <_puts_r+0x88>
	...

080006b8 <puts>:
 80006b8:	4b02      	ldr	r3, [pc, #8]	@ (80006c4 <puts+0xc>)
 80006ba:	4601      	mov	r1, r0
 80006bc:	6818      	ldr	r0, [r3, #0]
 80006be:	f7ff bfa5 	b.w	800060c <_puts_r>
 80006c2:	bf00      	nop
 80006c4:	20000018 	.word	0x20000018

080006c8 <__sread>:
 80006c8:	b510      	push	{r4, lr}
 80006ca:	460c      	mov	r4, r1
 80006cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80006d0:	f000 f8fc 	bl	80008cc <_read_r>
 80006d4:	2800      	cmp	r0, #0
 80006d6:	bfab      	itete	ge
 80006d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80006da:	89a3      	ldrhlt	r3, [r4, #12]
 80006dc:	181b      	addge	r3, r3, r0
 80006de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80006e2:	bfac      	ite	ge
 80006e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80006e6:	81a3      	strhlt	r3, [r4, #12]
 80006e8:	bd10      	pop	{r4, pc}

080006ea <__swrite>:
 80006ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80006ee:	461f      	mov	r7, r3
 80006f0:	898b      	ldrh	r3, [r1, #12]
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	4605      	mov	r5, r0
 80006f6:	460c      	mov	r4, r1
 80006f8:	4616      	mov	r6, r2
 80006fa:	d505      	bpl.n	8000708 <__swrite+0x1e>
 80006fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000700:	2302      	movs	r3, #2
 8000702:	2200      	movs	r2, #0
 8000704:	f000 f8d0 	bl	80008a8 <_lseek_r>
 8000708:	89a3      	ldrh	r3, [r4, #12]
 800070a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800070e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000712:	81a3      	strh	r3, [r4, #12]
 8000714:	4632      	mov	r2, r6
 8000716:	463b      	mov	r3, r7
 8000718:	4628      	mov	r0, r5
 800071a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800071e:	f000 b8e7 	b.w	80008f0 <_write_r>

08000722 <__sseek>:
 8000722:	b510      	push	{r4, lr}
 8000724:	460c      	mov	r4, r1
 8000726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800072a:	f000 f8bd 	bl	80008a8 <_lseek_r>
 800072e:	1c43      	adds	r3, r0, #1
 8000730:	89a3      	ldrh	r3, [r4, #12]
 8000732:	bf15      	itete	ne
 8000734:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000736:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800073a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800073e:	81a3      	strheq	r3, [r4, #12]
 8000740:	bf18      	it	ne
 8000742:	81a3      	strhne	r3, [r4, #12]
 8000744:	bd10      	pop	{r4, pc}

08000746 <__sclose>:
 8000746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800074a:	f000 b89d 	b.w	8000888 <_close_r>

0800074e <__swbuf_r>:
 800074e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000750:	460e      	mov	r6, r1
 8000752:	4614      	mov	r4, r2
 8000754:	4605      	mov	r5, r0
 8000756:	b118      	cbz	r0, 8000760 <__swbuf_r+0x12>
 8000758:	6a03      	ldr	r3, [r0, #32]
 800075a:	b90b      	cbnz	r3, 8000760 <__swbuf_r+0x12>
 800075c:	f7ff ff20 	bl	80005a0 <__sinit>
 8000760:	69a3      	ldr	r3, [r4, #24]
 8000762:	60a3      	str	r3, [r4, #8]
 8000764:	89a3      	ldrh	r3, [r4, #12]
 8000766:	071a      	lsls	r2, r3, #28
 8000768:	d501      	bpl.n	800076e <__swbuf_r+0x20>
 800076a:	6923      	ldr	r3, [r4, #16]
 800076c:	b943      	cbnz	r3, 8000780 <__swbuf_r+0x32>
 800076e:	4621      	mov	r1, r4
 8000770:	4628      	mov	r0, r5
 8000772:	f000 f82b 	bl	80007cc <__swsetup_r>
 8000776:	b118      	cbz	r0, 8000780 <__swbuf_r+0x32>
 8000778:	f04f 37ff 	mov.w	r7, #4294967295
 800077c:	4638      	mov	r0, r7
 800077e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000780:	6823      	ldr	r3, [r4, #0]
 8000782:	6922      	ldr	r2, [r4, #16]
 8000784:	1a98      	subs	r0, r3, r2
 8000786:	6963      	ldr	r3, [r4, #20]
 8000788:	b2f6      	uxtb	r6, r6
 800078a:	4283      	cmp	r3, r0
 800078c:	4637      	mov	r7, r6
 800078e:	dc05      	bgt.n	800079c <__swbuf_r+0x4e>
 8000790:	4621      	mov	r1, r4
 8000792:	4628      	mov	r0, r5
 8000794:	f000 fa64 	bl	8000c60 <_fflush_r>
 8000798:	2800      	cmp	r0, #0
 800079a:	d1ed      	bne.n	8000778 <__swbuf_r+0x2a>
 800079c:	68a3      	ldr	r3, [r4, #8]
 800079e:	3b01      	subs	r3, #1
 80007a0:	60a3      	str	r3, [r4, #8]
 80007a2:	6823      	ldr	r3, [r4, #0]
 80007a4:	1c5a      	adds	r2, r3, #1
 80007a6:	6022      	str	r2, [r4, #0]
 80007a8:	701e      	strb	r6, [r3, #0]
 80007aa:	6962      	ldr	r2, [r4, #20]
 80007ac:	1c43      	adds	r3, r0, #1
 80007ae:	429a      	cmp	r2, r3
 80007b0:	d004      	beq.n	80007bc <__swbuf_r+0x6e>
 80007b2:	89a3      	ldrh	r3, [r4, #12]
 80007b4:	07db      	lsls	r3, r3, #31
 80007b6:	d5e1      	bpl.n	800077c <__swbuf_r+0x2e>
 80007b8:	2e0a      	cmp	r6, #10
 80007ba:	d1df      	bne.n	800077c <__swbuf_r+0x2e>
 80007bc:	4621      	mov	r1, r4
 80007be:	4628      	mov	r0, r5
 80007c0:	f000 fa4e 	bl	8000c60 <_fflush_r>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d0d9      	beq.n	800077c <__swbuf_r+0x2e>
 80007c8:	e7d6      	b.n	8000778 <__swbuf_r+0x2a>
	...

080007cc <__swsetup_r>:
 80007cc:	b538      	push	{r3, r4, r5, lr}
 80007ce:	4b29      	ldr	r3, [pc, #164]	@ (8000874 <__swsetup_r+0xa8>)
 80007d0:	4605      	mov	r5, r0
 80007d2:	6818      	ldr	r0, [r3, #0]
 80007d4:	460c      	mov	r4, r1
 80007d6:	b118      	cbz	r0, 80007e0 <__swsetup_r+0x14>
 80007d8:	6a03      	ldr	r3, [r0, #32]
 80007da:	b90b      	cbnz	r3, 80007e0 <__swsetup_r+0x14>
 80007dc:	f7ff fee0 	bl	80005a0 <__sinit>
 80007e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80007e4:	0719      	lsls	r1, r3, #28
 80007e6:	d422      	bmi.n	800082e <__swsetup_r+0x62>
 80007e8:	06da      	lsls	r2, r3, #27
 80007ea:	d407      	bmi.n	80007fc <__swsetup_r+0x30>
 80007ec:	2209      	movs	r2, #9
 80007ee:	602a      	str	r2, [r5, #0]
 80007f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007f4:	81a3      	strh	r3, [r4, #12]
 80007f6:	f04f 30ff 	mov.w	r0, #4294967295
 80007fa:	e033      	b.n	8000864 <__swsetup_r+0x98>
 80007fc:	0758      	lsls	r0, r3, #29
 80007fe:	d512      	bpl.n	8000826 <__swsetup_r+0x5a>
 8000800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000802:	b141      	cbz	r1, 8000816 <__swsetup_r+0x4a>
 8000804:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000808:	4299      	cmp	r1, r3
 800080a:	d002      	beq.n	8000812 <__swsetup_r+0x46>
 800080c:	4628      	mov	r0, r5
 800080e:	f000 f8af 	bl	8000970 <_free_r>
 8000812:	2300      	movs	r3, #0
 8000814:	6363      	str	r3, [r4, #52]	@ 0x34
 8000816:	89a3      	ldrh	r3, [r4, #12]
 8000818:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800081c:	81a3      	strh	r3, [r4, #12]
 800081e:	2300      	movs	r3, #0
 8000820:	6063      	str	r3, [r4, #4]
 8000822:	6923      	ldr	r3, [r4, #16]
 8000824:	6023      	str	r3, [r4, #0]
 8000826:	89a3      	ldrh	r3, [r4, #12]
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	81a3      	strh	r3, [r4, #12]
 800082e:	6923      	ldr	r3, [r4, #16]
 8000830:	b94b      	cbnz	r3, 8000846 <__swsetup_r+0x7a>
 8000832:	89a3      	ldrh	r3, [r4, #12]
 8000834:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000838:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800083c:	d003      	beq.n	8000846 <__swsetup_r+0x7a>
 800083e:	4621      	mov	r1, r4
 8000840:	4628      	mov	r0, r5
 8000842:	f000 fa5b 	bl	8000cfc <__smakebuf_r>
 8000846:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800084a:	f013 0201 	ands.w	r2, r3, #1
 800084e:	d00a      	beq.n	8000866 <__swsetup_r+0x9a>
 8000850:	2200      	movs	r2, #0
 8000852:	60a2      	str	r2, [r4, #8]
 8000854:	6962      	ldr	r2, [r4, #20]
 8000856:	4252      	negs	r2, r2
 8000858:	61a2      	str	r2, [r4, #24]
 800085a:	6922      	ldr	r2, [r4, #16]
 800085c:	b942      	cbnz	r2, 8000870 <__swsetup_r+0xa4>
 800085e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000862:	d1c5      	bne.n	80007f0 <__swsetup_r+0x24>
 8000864:	bd38      	pop	{r3, r4, r5, pc}
 8000866:	0799      	lsls	r1, r3, #30
 8000868:	bf58      	it	pl
 800086a:	6962      	ldrpl	r2, [r4, #20]
 800086c:	60a2      	str	r2, [r4, #8]
 800086e:	e7f4      	b.n	800085a <__swsetup_r+0x8e>
 8000870:	2000      	movs	r0, #0
 8000872:	e7f7      	b.n	8000864 <__swsetup_r+0x98>
 8000874:	20000018 	.word	0x20000018

08000878 <memset>:
 8000878:	4402      	add	r2, r0
 800087a:	4603      	mov	r3, r0
 800087c:	4293      	cmp	r3, r2
 800087e:	d100      	bne.n	8000882 <memset+0xa>
 8000880:	4770      	bx	lr
 8000882:	f803 1b01 	strb.w	r1, [r3], #1
 8000886:	e7f9      	b.n	800087c <memset+0x4>

08000888 <_close_r>:
 8000888:	b538      	push	{r3, r4, r5, lr}
 800088a:	4d06      	ldr	r5, [pc, #24]	@ (80008a4 <_close_r+0x1c>)
 800088c:	2300      	movs	r3, #0
 800088e:	4604      	mov	r4, r0
 8000890:	4608      	mov	r0, r1
 8000892:	602b      	str	r3, [r5, #0]
 8000894:	f7ff fd67 	bl	8000366 <_close>
 8000898:	1c43      	adds	r3, r0, #1
 800089a:	d102      	bne.n	80008a2 <_close_r+0x1a>
 800089c:	682b      	ldr	r3, [r5, #0]
 800089e:	b103      	cbz	r3, 80008a2 <_close_r+0x1a>
 80008a0:	6023      	str	r3, [r4, #0]
 80008a2:	bd38      	pop	{r3, r4, r5, pc}
 80008a4:	200001c4 	.word	0x200001c4

080008a8 <_lseek_r>:
 80008a8:	b538      	push	{r3, r4, r5, lr}
 80008aa:	4d07      	ldr	r5, [pc, #28]	@ (80008c8 <_lseek_r+0x20>)
 80008ac:	4604      	mov	r4, r0
 80008ae:	4608      	mov	r0, r1
 80008b0:	4611      	mov	r1, r2
 80008b2:	2200      	movs	r2, #0
 80008b4:	602a      	str	r2, [r5, #0]
 80008b6:	461a      	mov	r2, r3
 80008b8:	f7ff fd79 	bl	80003ae <_lseek>
 80008bc:	1c43      	adds	r3, r0, #1
 80008be:	d102      	bne.n	80008c6 <_lseek_r+0x1e>
 80008c0:	682b      	ldr	r3, [r5, #0]
 80008c2:	b103      	cbz	r3, 80008c6 <_lseek_r+0x1e>
 80008c4:	6023      	str	r3, [r4, #0]
 80008c6:	bd38      	pop	{r3, r4, r5, pc}
 80008c8:	200001c4 	.word	0x200001c4

080008cc <_read_r>:
 80008cc:	b538      	push	{r3, r4, r5, lr}
 80008ce:	4d07      	ldr	r5, [pc, #28]	@ (80008ec <_read_r+0x20>)
 80008d0:	4604      	mov	r4, r0
 80008d2:	4608      	mov	r0, r1
 80008d4:	4611      	mov	r1, r2
 80008d6:	2200      	movs	r2, #0
 80008d8:	602a      	str	r2, [r5, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	f7ff fd0a 	bl	80002f4 <_read>
 80008e0:	1c43      	adds	r3, r0, #1
 80008e2:	d102      	bne.n	80008ea <_read_r+0x1e>
 80008e4:	682b      	ldr	r3, [r5, #0]
 80008e6:	b103      	cbz	r3, 80008ea <_read_r+0x1e>
 80008e8:	6023      	str	r3, [r4, #0]
 80008ea:	bd38      	pop	{r3, r4, r5, pc}
 80008ec:	200001c4 	.word	0x200001c4

080008f0 <_write_r>:
 80008f0:	b538      	push	{r3, r4, r5, lr}
 80008f2:	4d07      	ldr	r5, [pc, #28]	@ (8000910 <_write_r+0x20>)
 80008f4:	4604      	mov	r4, r0
 80008f6:	4608      	mov	r0, r1
 80008f8:	4611      	mov	r1, r2
 80008fa:	2200      	movs	r2, #0
 80008fc:	602a      	str	r2, [r5, #0]
 80008fe:	461a      	mov	r2, r3
 8000900:	f7ff fd15 	bl	800032e <_write>
 8000904:	1c43      	adds	r3, r0, #1
 8000906:	d102      	bne.n	800090e <_write_r+0x1e>
 8000908:	682b      	ldr	r3, [r5, #0]
 800090a:	b103      	cbz	r3, 800090e <_write_r+0x1e>
 800090c:	6023      	str	r3, [r4, #0]
 800090e:	bd38      	pop	{r3, r4, r5, pc}
 8000910:	200001c4 	.word	0x200001c4

08000914 <__errno>:
 8000914:	4b01      	ldr	r3, [pc, #4]	@ (800091c <__errno+0x8>)
 8000916:	6818      	ldr	r0, [r3, #0]
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000018 	.word	0x20000018

08000920 <__libc_init_array>:
 8000920:	b570      	push	{r4, r5, r6, lr}
 8000922:	4d0d      	ldr	r5, [pc, #52]	@ (8000958 <__libc_init_array+0x38>)
 8000924:	4c0d      	ldr	r4, [pc, #52]	@ (800095c <__libc_init_array+0x3c>)
 8000926:	1b64      	subs	r4, r4, r5
 8000928:	10a4      	asrs	r4, r4, #2
 800092a:	2600      	movs	r6, #0
 800092c:	42a6      	cmp	r6, r4
 800092e:	d109      	bne.n	8000944 <__libc_init_array+0x24>
 8000930:	4d0b      	ldr	r5, [pc, #44]	@ (8000960 <__libc_init_array+0x40>)
 8000932:	4c0c      	ldr	r4, [pc, #48]	@ (8000964 <__libc_init_array+0x44>)
 8000934:	f000 fa50 	bl	8000dd8 <_init>
 8000938:	1b64      	subs	r4, r4, r5
 800093a:	10a4      	asrs	r4, r4, #2
 800093c:	2600      	movs	r6, #0
 800093e:	42a6      	cmp	r6, r4
 8000940:	d105      	bne.n	800094e <__libc_init_array+0x2e>
 8000942:	bd70      	pop	{r4, r5, r6, pc}
 8000944:	f855 3b04 	ldr.w	r3, [r5], #4
 8000948:	4798      	blx	r3
 800094a:	3601      	adds	r6, #1
 800094c:	e7ee      	b.n	800092c <__libc_init_array+0xc>
 800094e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000952:	4798      	blx	r3
 8000954:	3601      	adds	r6, #1
 8000956:	e7f2      	b.n	800093e <__libc_init_array+0x1e>
 8000958:	08000e1c 	.word	0x08000e1c
 800095c:	08000e1c 	.word	0x08000e1c
 8000960:	08000e1c 	.word	0x08000e1c
 8000964:	08000e20 	.word	0x08000e20

08000968 <__retarget_lock_init_recursive>:
 8000968:	4770      	bx	lr

0800096a <__retarget_lock_acquire_recursive>:
 800096a:	4770      	bx	lr

0800096c <__retarget_lock_release_recursive>:
 800096c:	4770      	bx	lr
	...

08000970 <_free_r>:
 8000970:	b538      	push	{r3, r4, r5, lr}
 8000972:	4605      	mov	r5, r0
 8000974:	2900      	cmp	r1, #0
 8000976:	d041      	beq.n	80009fc <_free_r+0x8c>
 8000978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800097c:	1f0c      	subs	r4, r1, #4
 800097e:	2b00      	cmp	r3, #0
 8000980:	bfb8      	it	lt
 8000982:	18e4      	addlt	r4, r4, r3
 8000984:	f000 f8e0 	bl	8000b48 <__malloc_lock>
 8000988:	4a1d      	ldr	r2, [pc, #116]	@ (8000a00 <_free_r+0x90>)
 800098a:	6813      	ldr	r3, [r2, #0]
 800098c:	b933      	cbnz	r3, 800099c <_free_r+0x2c>
 800098e:	6063      	str	r3, [r4, #4]
 8000990:	6014      	str	r4, [r2, #0]
 8000992:	4628      	mov	r0, r5
 8000994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000998:	f000 b8dc 	b.w	8000b54 <__malloc_unlock>
 800099c:	42a3      	cmp	r3, r4
 800099e:	d908      	bls.n	80009b2 <_free_r+0x42>
 80009a0:	6820      	ldr	r0, [r4, #0]
 80009a2:	1821      	adds	r1, r4, r0
 80009a4:	428b      	cmp	r3, r1
 80009a6:	bf01      	itttt	eq
 80009a8:	6819      	ldreq	r1, [r3, #0]
 80009aa:	685b      	ldreq	r3, [r3, #4]
 80009ac:	1809      	addeq	r1, r1, r0
 80009ae:	6021      	streq	r1, [r4, #0]
 80009b0:	e7ed      	b.n	800098e <_free_r+0x1e>
 80009b2:	461a      	mov	r2, r3
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	b10b      	cbz	r3, 80009bc <_free_r+0x4c>
 80009b8:	42a3      	cmp	r3, r4
 80009ba:	d9fa      	bls.n	80009b2 <_free_r+0x42>
 80009bc:	6811      	ldr	r1, [r2, #0]
 80009be:	1850      	adds	r0, r2, r1
 80009c0:	42a0      	cmp	r0, r4
 80009c2:	d10b      	bne.n	80009dc <_free_r+0x6c>
 80009c4:	6820      	ldr	r0, [r4, #0]
 80009c6:	4401      	add	r1, r0
 80009c8:	1850      	adds	r0, r2, r1
 80009ca:	4283      	cmp	r3, r0
 80009cc:	6011      	str	r1, [r2, #0]
 80009ce:	d1e0      	bne.n	8000992 <_free_r+0x22>
 80009d0:	6818      	ldr	r0, [r3, #0]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	6053      	str	r3, [r2, #4]
 80009d6:	4408      	add	r0, r1
 80009d8:	6010      	str	r0, [r2, #0]
 80009da:	e7da      	b.n	8000992 <_free_r+0x22>
 80009dc:	d902      	bls.n	80009e4 <_free_r+0x74>
 80009de:	230c      	movs	r3, #12
 80009e0:	602b      	str	r3, [r5, #0]
 80009e2:	e7d6      	b.n	8000992 <_free_r+0x22>
 80009e4:	6820      	ldr	r0, [r4, #0]
 80009e6:	1821      	adds	r1, r4, r0
 80009e8:	428b      	cmp	r3, r1
 80009ea:	bf04      	itt	eq
 80009ec:	6819      	ldreq	r1, [r3, #0]
 80009ee:	685b      	ldreq	r3, [r3, #4]
 80009f0:	6063      	str	r3, [r4, #4]
 80009f2:	bf04      	itt	eq
 80009f4:	1809      	addeq	r1, r1, r0
 80009f6:	6021      	streq	r1, [r4, #0]
 80009f8:	6054      	str	r4, [r2, #4]
 80009fa:	e7ca      	b.n	8000992 <_free_r+0x22>
 80009fc:	bd38      	pop	{r3, r4, r5, pc}
 80009fe:	bf00      	nop
 8000a00:	200001d0 	.word	0x200001d0

08000a04 <sbrk_aligned>:
 8000a04:	b570      	push	{r4, r5, r6, lr}
 8000a06:	4e0f      	ldr	r6, [pc, #60]	@ (8000a44 <sbrk_aligned+0x40>)
 8000a08:	460c      	mov	r4, r1
 8000a0a:	6831      	ldr	r1, [r6, #0]
 8000a0c:	4605      	mov	r5, r0
 8000a0e:	b911      	cbnz	r1, 8000a16 <sbrk_aligned+0x12>
 8000a10:	f000 f9d2 	bl	8000db8 <_sbrk_r>
 8000a14:	6030      	str	r0, [r6, #0]
 8000a16:	4621      	mov	r1, r4
 8000a18:	4628      	mov	r0, r5
 8000a1a:	f000 f9cd 	bl	8000db8 <_sbrk_r>
 8000a1e:	1c43      	adds	r3, r0, #1
 8000a20:	d103      	bne.n	8000a2a <sbrk_aligned+0x26>
 8000a22:	f04f 34ff 	mov.w	r4, #4294967295
 8000a26:	4620      	mov	r0, r4
 8000a28:	bd70      	pop	{r4, r5, r6, pc}
 8000a2a:	1cc4      	adds	r4, r0, #3
 8000a2c:	f024 0403 	bic.w	r4, r4, #3
 8000a30:	42a0      	cmp	r0, r4
 8000a32:	d0f8      	beq.n	8000a26 <sbrk_aligned+0x22>
 8000a34:	1a21      	subs	r1, r4, r0
 8000a36:	4628      	mov	r0, r5
 8000a38:	f000 f9be 	bl	8000db8 <_sbrk_r>
 8000a3c:	3001      	adds	r0, #1
 8000a3e:	d1f2      	bne.n	8000a26 <sbrk_aligned+0x22>
 8000a40:	e7ef      	b.n	8000a22 <sbrk_aligned+0x1e>
 8000a42:	bf00      	nop
 8000a44:	200001cc 	.word	0x200001cc

08000a48 <_malloc_r>:
 8000a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a4c:	1ccd      	adds	r5, r1, #3
 8000a4e:	f025 0503 	bic.w	r5, r5, #3
 8000a52:	3508      	adds	r5, #8
 8000a54:	2d0c      	cmp	r5, #12
 8000a56:	bf38      	it	cc
 8000a58:	250c      	movcc	r5, #12
 8000a5a:	2d00      	cmp	r5, #0
 8000a5c:	4606      	mov	r6, r0
 8000a5e:	db01      	blt.n	8000a64 <_malloc_r+0x1c>
 8000a60:	42a9      	cmp	r1, r5
 8000a62:	d904      	bls.n	8000a6e <_malloc_r+0x26>
 8000a64:	230c      	movs	r3, #12
 8000a66:	6033      	str	r3, [r6, #0]
 8000a68:	2000      	movs	r0, #0
 8000a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000b44 <_malloc_r+0xfc>
 8000a72:	f000 f869 	bl	8000b48 <__malloc_lock>
 8000a76:	f8d8 3000 	ldr.w	r3, [r8]
 8000a7a:	461c      	mov	r4, r3
 8000a7c:	bb44      	cbnz	r4, 8000ad0 <_malloc_r+0x88>
 8000a7e:	4629      	mov	r1, r5
 8000a80:	4630      	mov	r0, r6
 8000a82:	f7ff ffbf 	bl	8000a04 <sbrk_aligned>
 8000a86:	1c43      	adds	r3, r0, #1
 8000a88:	4604      	mov	r4, r0
 8000a8a:	d158      	bne.n	8000b3e <_malloc_r+0xf6>
 8000a8c:	f8d8 4000 	ldr.w	r4, [r8]
 8000a90:	4627      	mov	r7, r4
 8000a92:	2f00      	cmp	r7, #0
 8000a94:	d143      	bne.n	8000b1e <_malloc_r+0xd6>
 8000a96:	2c00      	cmp	r4, #0
 8000a98:	d04b      	beq.n	8000b32 <_malloc_r+0xea>
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	4639      	mov	r1, r7
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	eb04 0903 	add.w	r9, r4, r3
 8000aa4:	f000 f988 	bl	8000db8 <_sbrk_r>
 8000aa8:	4581      	cmp	r9, r0
 8000aaa:	d142      	bne.n	8000b32 <_malloc_r+0xea>
 8000aac:	6821      	ldr	r1, [r4, #0]
 8000aae:	1a6d      	subs	r5, r5, r1
 8000ab0:	4629      	mov	r1, r5
 8000ab2:	4630      	mov	r0, r6
 8000ab4:	f7ff ffa6 	bl	8000a04 <sbrk_aligned>
 8000ab8:	3001      	adds	r0, #1
 8000aba:	d03a      	beq.n	8000b32 <_malloc_r+0xea>
 8000abc:	6823      	ldr	r3, [r4, #0]
 8000abe:	442b      	add	r3, r5
 8000ac0:	6023      	str	r3, [r4, #0]
 8000ac2:	f8d8 3000 	ldr.w	r3, [r8]
 8000ac6:	685a      	ldr	r2, [r3, #4]
 8000ac8:	bb62      	cbnz	r2, 8000b24 <_malloc_r+0xdc>
 8000aca:	f8c8 7000 	str.w	r7, [r8]
 8000ace:	e00f      	b.n	8000af0 <_malloc_r+0xa8>
 8000ad0:	6822      	ldr	r2, [r4, #0]
 8000ad2:	1b52      	subs	r2, r2, r5
 8000ad4:	d420      	bmi.n	8000b18 <_malloc_r+0xd0>
 8000ad6:	2a0b      	cmp	r2, #11
 8000ad8:	d917      	bls.n	8000b0a <_malloc_r+0xc2>
 8000ada:	1961      	adds	r1, r4, r5
 8000adc:	42a3      	cmp	r3, r4
 8000ade:	6025      	str	r5, [r4, #0]
 8000ae0:	bf18      	it	ne
 8000ae2:	6059      	strne	r1, [r3, #4]
 8000ae4:	6863      	ldr	r3, [r4, #4]
 8000ae6:	bf08      	it	eq
 8000ae8:	f8c8 1000 	streq.w	r1, [r8]
 8000aec:	5162      	str	r2, [r4, r5]
 8000aee:	604b      	str	r3, [r1, #4]
 8000af0:	4630      	mov	r0, r6
 8000af2:	f000 f82f 	bl	8000b54 <__malloc_unlock>
 8000af6:	f104 000b 	add.w	r0, r4, #11
 8000afa:	1d23      	adds	r3, r4, #4
 8000afc:	f020 0007 	bic.w	r0, r0, #7
 8000b00:	1ac2      	subs	r2, r0, r3
 8000b02:	bf1c      	itt	ne
 8000b04:	1a1b      	subne	r3, r3, r0
 8000b06:	50a3      	strne	r3, [r4, r2]
 8000b08:	e7af      	b.n	8000a6a <_malloc_r+0x22>
 8000b0a:	6862      	ldr	r2, [r4, #4]
 8000b0c:	42a3      	cmp	r3, r4
 8000b0e:	bf0c      	ite	eq
 8000b10:	f8c8 2000 	streq.w	r2, [r8]
 8000b14:	605a      	strne	r2, [r3, #4]
 8000b16:	e7eb      	b.n	8000af0 <_malloc_r+0xa8>
 8000b18:	4623      	mov	r3, r4
 8000b1a:	6864      	ldr	r4, [r4, #4]
 8000b1c:	e7ae      	b.n	8000a7c <_malloc_r+0x34>
 8000b1e:	463c      	mov	r4, r7
 8000b20:	687f      	ldr	r7, [r7, #4]
 8000b22:	e7b6      	b.n	8000a92 <_malloc_r+0x4a>
 8000b24:	461a      	mov	r2, r3
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	42a3      	cmp	r3, r4
 8000b2a:	d1fb      	bne.n	8000b24 <_malloc_r+0xdc>
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	6053      	str	r3, [r2, #4]
 8000b30:	e7de      	b.n	8000af0 <_malloc_r+0xa8>
 8000b32:	230c      	movs	r3, #12
 8000b34:	6033      	str	r3, [r6, #0]
 8000b36:	4630      	mov	r0, r6
 8000b38:	f000 f80c 	bl	8000b54 <__malloc_unlock>
 8000b3c:	e794      	b.n	8000a68 <_malloc_r+0x20>
 8000b3e:	6005      	str	r5, [r0, #0]
 8000b40:	e7d6      	b.n	8000af0 <_malloc_r+0xa8>
 8000b42:	bf00      	nop
 8000b44:	200001d0 	.word	0x200001d0

08000b48 <__malloc_lock>:
 8000b48:	4801      	ldr	r0, [pc, #4]	@ (8000b50 <__malloc_lock+0x8>)
 8000b4a:	f7ff bf0e 	b.w	800096a <__retarget_lock_acquire_recursive>
 8000b4e:	bf00      	nop
 8000b50:	200001c8 	.word	0x200001c8

08000b54 <__malloc_unlock>:
 8000b54:	4801      	ldr	r0, [pc, #4]	@ (8000b5c <__malloc_unlock+0x8>)
 8000b56:	f7ff bf09 	b.w	800096c <__retarget_lock_release_recursive>
 8000b5a:	bf00      	nop
 8000b5c:	200001c8 	.word	0x200001c8

08000b60 <__sflush_r>:
 8000b60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b66:	0716      	lsls	r6, r2, #28
 8000b68:	4605      	mov	r5, r0
 8000b6a:	460c      	mov	r4, r1
 8000b6c:	d454      	bmi.n	8000c18 <__sflush_r+0xb8>
 8000b6e:	684b      	ldr	r3, [r1, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	dc02      	bgt.n	8000b7a <__sflush_r+0x1a>
 8000b74:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	dd48      	ble.n	8000c0c <__sflush_r+0xac>
 8000b7a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000b7c:	2e00      	cmp	r6, #0
 8000b7e:	d045      	beq.n	8000c0c <__sflush_r+0xac>
 8000b80:	2300      	movs	r3, #0
 8000b82:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000b86:	682f      	ldr	r7, [r5, #0]
 8000b88:	6a21      	ldr	r1, [r4, #32]
 8000b8a:	602b      	str	r3, [r5, #0]
 8000b8c:	d030      	beq.n	8000bf0 <__sflush_r+0x90>
 8000b8e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000b90:	89a3      	ldrh	r3, [r4, #12]
 8000b92:	0759      	lsls	r1, r3, #29
 8000b94:	d505      	bpl.n	8000ba2 <__sflush_r+0x42>
 8000b96:	6863      	ldr	r3, [r4, #4]
 8000b98:	1ad2      	subs	r2, r2, r3
 8000b9a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000b9c:	b10b      	cbz	r3, 8000ba2 <__sflush_r+0x42>
 8000b9e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000ba0:	1ad2      	subs	r2, r2, r3
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000ba6:	6a21      	ldr	r1, [r4, #32]
 8000ba8:	4628      	mov	r0, r5
 8000baa:	47b0      	blx	r6
 8000bac:	1c43      	adds	r3, r0, #1
 8000bae:	89a3      	ldrh	r3, [r4, #12]
 8000bb0:	d106      	bne.n	8000bc0 <__sflush_r+0x60>
 8000bb2:	6829      	ldr	r1, [r5, #0]
 8000bb4:	291d      	cmp	r1, #29
 8000bb6:	d82b      	bhi.n	8000c10 <__sflush_r+0xb0>
 8000bb8:	4a28      	ldr	r2, [pc, #160]	@ (8000c5c <__sflush_r+0xfc>)
 8000bba:	410a      	asrs	r2, r1
 8000bbc:	07d6      	lsls	r6, r2, #31
 8000bbe:	d427      	bmi.n	8000c10 <__sflush_r+0xb0>
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	6062      	str	r2, [r4, #4]
 8000bc4:	04d9      	lsls	r1, r3, #19
 8000bc6:	6922      	ldr	r2, [r4, #16]
 8000bc8:	6022      	str	r2, [r4, #0]
 8000bca:	d504      	bpl.n	8000bd6 <__sflush_r+0x76>
 8000bcc:	1c42      	adds	r2, r0, #1
 8000bce:	d101      	bne.n	8000bd4 <__sflush_r+0x74>
 8000bd0:	682b      	ldr	r3, [r5, #0]
 8000bd2:	b903      	cbnz	r3, 8000bd6 <__sflush_r+0x76>
 8000bd4:	6560      	str	r0, [r4, #84]	@ 0x54
 8000bd6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000bd8:	602f      	str	r7, [r5, #0]
 8000bda:	b1b9      	cbz	r1, 8000c0c <__sflush_r+0xac>
 8000bdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000be0:	4299      	cmp	r1, r3
 8000be2:	d002      	beq.n	8000bea <__sflush_r+0x8a>
 8000be4:	4628      	mov	r0, r5
 8000be6:	f7ff fec3 	bl	8000970 <_free_r>
 8000bea:	2300      	movs	r3, #0
 8000bec:	6363      	str	r3, [r4, #52]	@ 0x34
 8000bee:	e00d      	b.n	8000c0c <__sflush_r+0xac>
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	4628      	mov	r0, r5
 8000bf4:	47b0      	blx	r6
 8000bf6:	4602      	mov	r2, r0
 8000bf8:	1c50      	adds	r0, r2, #1
 8000bfa:	d1c9      	bne.n	8000b90 <__sflush_r+0x30>
 8000bfc:	682b      	ldr	r3, [r5, #0]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d0c6      	beq.n	8000b90 <__sflush_r+0x30>
 8000c02:	2b1d      	cmp	r3, #29
 8000c04:	d001      	beq.n	8000c0a <__sflush_r+0xaa>
 8000c06:	2b16      	cmp	r3, #22
 8000c08:	d11d      	bne.n	8000c46 <__sflush_r+0xe6>
 8000c0a:	602f      	str	r7, [r5, #0]
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	e021      	b.n	8000c54 <__sflush_r+0xf4>
 8000c10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c14:	b21b      	sxth	r3, r3
 8000c16:	e01a      	b.n	8000c4e <__sflush_r+0xee>
 8000c18:	690f      	ldr	r7, [r1, #16]
 8000c1a:	2f00      	cmp	r7, #0
 8000c1c:	d0f6      	beq.n	8000c0c <__sflush_r+0xac>
 8000c1e:	0793      	lsls	r3, r2, #30
 8000c20:	680e      	ldr	r6, [r1, #0]
 8000c22:	bf08      	it	eq
 8000c24:	694b      	ldreq	r3, [r1, #20]
 8000c26:	600f      	str	r7, [r1, #0]
 8000c28:	bf18      	it	ne
 8000c2a:	2300      	movne	r3, #0
 8000c2c:	1bf6      	subs	r6, r6, r7
 8000c2e:	608b      	str	r3, [r1, #8]
 8000c30:	2e00      	cmp	r6, #0
 8000c32:	ddeb      	ble.n	8000c0c <__sflush_r+0xac>
 8000c34:	6a21      	ldr	r1, [r4, #32]
 8000c36:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000c3a:	4633      	mov	r3, r6
 8000c3c:	463a      	mov	r2, r7
 8000c3e:	4628      	mov	r0, r5
 8000c40:	47e0      	blx	ip
 8000c42:	2800      	cmp	r0, #0
 8000c44:	dc07      	bgt.n	8000c56 <__sflush_r+0xf6>
 8000c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c4e:	81a3      	strh	r3, [r4, #12]
 8000c50:	f04f 30ff 	mov.w	r0, #4294967295
 8000c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c56:	4407      	add	r7, r0
 8000c58:	1a36      	subs	r6, r6, r0
 8000c5a:	e7e9      	b.n	8000c30 <__sflush_r+0xd0>
 8000c5c:	dfbffffe 	.word	0xdfbffffe

08000c60 <_fflush_r>:
 8000c60:	b538      	push	{r3, r4, r5, lr}
 8000c62:	690b      	ldr	r3, [r1, #16]
 8000c64:	4605      	mov	r5, r0
 8000c66:	460c      	mov	r4, r1
 8000c68:	b913      	cbnz	r3, 8000c70 <_fflush_r+0x10>
 8000c6a:	2500      	movs	r5, #0
 8000c6c:	4628      	mov	r0, r5
 8000c6e:	bd38      	pop	{r3, r4, r5, pc}
 8000c70:	b118      	cbz	r0, 8000c7a <_fflush_r+0x1a>
 8000c72:	6a03      	ldr	r3, [r0, #32]
 8000c74:	b90b      	cbnz	r3, 8000c7a <_fflush_r+0x1a>
 8000c76:	f7ff fc93 	bl	80005a0 <__sinit>
 8000c7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d0f3      	beq.n	8000c6a <_fflush_r+0xa>
 8000c82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000c84:	07d0      	lsls	r0, r2, #31
 8000c86:	d404      	bmi.n	8000c92 <_fflush_r+0x32>
 8000c88:	0599      	lsls	r1, r3, #22
 8000c8a:	d402      	bmi.n	8000c92 <_fflush_r+0x32>
 8000c8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000c8e:	f7ff fe6c 	bl	800096a <__retarget_lock_acquire_recursive>
 8000c92:	4628      	mov	r0, r5
 8000c94:	4621      	mov	r1, r4
 8000c96:	f7ff ff63 	bl	8000b60 <__sflush_r>
 8000c9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000c9c:	07da      	lsls	r2, r3, #31
 8000c9e:	4605      	mov	r5, r0
 8000ca0:	d4e4      	bmi.n	8000c6c <_fflush_r+0xc>
 8000ca2:	89a3      	ldrh	r3, [r4, #12]
 8000ca4:	059b      	lsls	r3, r3, #22
 8000ca6:	d4e1      	bmi.n	8000c6c <_fflush_r+0xc>
 8000ca8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000caa:	f7ff fe5f 	bl	800096c <__retarget_lock_release_recursive>
 8000cae:	e7dd      	b.n	8000c6c <_fflush_r+0xc>

08000cb0 <__swhatbuf_r>:
 8000cb0:	b570      	push	{r4, r5, r6, lr}
 8000cb2:	460c      	mov	r4, r1
 8000cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000cb8:	2900      	cmp	r1, #0
 8000cba:	b096      	sub	sp, #88	@ 0x58
 8000cbc:	4615      	mov	r5, r2
 8000cbe:	461e      	mov	r6, r3
 8000cc0:	da0d      	bge.n	8000cde <__swhatbuf_r+0x2e>
 8000cc2:	89a3      	ldrh	r3, [r4, #12]
 8000cc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000cc8:	f04f 0100 	mov.w	r1, #0
 8000ccc:	bf14      	ite	ne
 8000cce:	2340      	movne	r3, #64	@ 0x40
 8000cd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	6031      	str	r1, [r6, #0]
 8000cd8:	602b      	str	r3, [r5, #0]
 8000cda:	b016      	add	sp, #88	@ 0x58
 8000cdc:	bd70      	pop	{r4, r5, r6, pc}
 8000cde:	466a      	mov	r2, sp
 8000ce0:	f000 f848 	bl	8000d74 <_fstat_r>
 8000ce4:	2800      	cmp	r0, #0
 8000ce6:	dbec      	blt.n	8000cc2 <__swhatbuf_r+0x12>
 8000ce8:	9901      	ldr	r1, [sp, #4]
 8000cea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000cee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000cf2:	4259      	negs	r1, r3
 8000cf4:	4159      	adcs	r1, r3
 8000cf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cfa:	e7eb      	b.n	8000cd4 <__swhatbuf_r+0x24>

08000cfc <__smakebuf_r>:
 8000cfc:	898b      	ldrh	r3, [r1, #12]
 8000cfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d00:	079d      	lsls	r5, r3, #30
 8000d02:	4606      	mov	r6, r0
 8000d04:	460c      	mov	r4, r1
 8000d06:	d507      	bpl.n	8000d18 <__smakebuf_r+0x1c>
 8000d08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000d0c:	6023      	str	r3, [r4, #0]
 8000d0e:	6123      	str	r3, [r4, #16]
 8000d10:	2301      	movs	r3, #1
 8000d12:	6163      	str	r3, [r4, #20]
 8000d14:	b003      	add	sp, #12
 8000d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000d18:	ab01      	add	r3, sp, #4
 8000d1a:	466a      	mov	r2, sp
 8000d1c:	f7ff ffc8 	bl	8000cb0 <__swhatbuf_r>
 8000d20:	9f00      	ldr	r7, [sp, #0]
 8000d22:	4605      	mov	r5, r0
 8000d24:	4639      	mov	r1, r7
 8000d26:	4630      	mov	r0, r6
 8000d28:	f7ff fe8e 	bl	8000a48 <_malloc_r>
 8000d2c:	b948      	cbnz	r0, 8000d42 <__smakebuf_r+0x46>
 8000d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d32:	059a      	lsls	r2, r3, #22
 8000d34:	d4ee      	bmi.n	8000d14 <__smakebuf_r+0x18>
 8000d36:	f023 0303 	bic.w	r3, r3, #3
 8000d3a:	f043 0302 	orr.w	r3, r3, #2
 8000d3e:	81a3      	strh	r3, [r4, #12]
 8000d40:	e7e2      	b.n	8000d08 <__smakebuf_r+0xc>
 8000d42:	89a3      	ldrh	r3, [r4, #12]
 8000d44:	6020      	str	r0, [r4, #0]
 8000d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4a:	81a3      	strh	r3, [r4, #12]
 8000d4c:	9b01      	ldr	r3, [sp, #4]
 8000d4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000d52:	b15b      	cbz	r3, 8000d6c <__smakebuf_r+0x70>
 8000d54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d58:	4630      	mov	r0, r6
 8000d5a:	f000 f81d 	bl	8000d98 <_isatty_r>
 8000d5e:	b128      	cbz	r0, 8000d6c <__smakebuf_r+0x70>
 8000d60:	89a3      	ldrh	r3, [r4, #12]
 8000d62:	f023 0303 	bic.w	r3, r3, #3
 8000d66:	f043 0301 	orr.w	r3, r3, #1
 8000d6a:	81a3      	strh	r3, [r4, #12]
 8000d6c:	89a3      	ldrh	r3, [r4, #12]
 8000d6e:	431d      	orrs	r5, r3
 8000d70:	81a5      	strh	r5, [r4, #12]
 8000d72:	e7cf      	b.n	8000d14 <__smakebuf_r+0x18>

08000d74 <_fstat_r>:
 8000d74:	b538      	push	{r3, r4, r5, lr}
 8000d76:	4d07      	ldr	r5, [pc, #28]	@ (8000d94 <_fstat_r+0x20>)
 8000d78:	2300      	movs	r3, #0
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	4611      	mov	r1, r2
 8000d80:	602b      	str	r3, [r5, #0]
 8000d82:	f7ff fafb 	bl	800037c <_fstat>
 8000d86:	1c43      	adds	r3, r0, #1
 8000d88:	d102      	bne.n	8000d90 <_fstat_r+0x1c>
 8000d8a:	682b      	ldr	r3, [r5, #0]
 8000d8c:	b103      	cbz	r3, 8000d90 <_fstat_r+0x1c>
 8000d8e:	6023      	str	r3, [r4, #0]
 8000d90:	bd38      	pop	{r3, r4, r5, pc}
 8000d92:	bf00      	nop
 8000d94:	200001c4 	.word	0x200001c4

08000d98 <_isatty_r>:
 8000d98:	b538      	push	{r3, r4, r5, lr}
 8000d9a:	4d06      	ldr	r5, [pc, #24]	@ (8000db4 <_isatty_r+0x1c>)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	4604      	mov	r4, r0
 8000da0:	4608      	mov	r0, r1
 8000da2:	602b      	str	r3, [r5, #0]
 8000da4:	f7ff faf9 	bl	800039a <_isatty>
 8000da8:	1c43      	adds	r3, r0, #1
 8000daa:	d102      	bne.n	8000db2 <_isatty_r+0x1a>
 8000dac:	682b      	ldr	r3, [r5, #0]
 8000dae:	b103      	cbz	r3, 8000db2 <_isatty_r+0x1a>
 8000db0:	6023      	str	r3, [r4, #0]
 8000db2:	bd38      	pop	{r3, r4, r5, pc}
 8000db4:	200001c4 	.word	0x200001c4

08000db8 <_sbrk_r>:
 8000db8:	b538      	push	{r3, r4, r5, lr}
 8000dba:	4d06      	ldr	r5, [pc, #24]	@ (8000dd4 <_sbrk_r+0x1c>)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	4608      	mov	r0, r1
 8000dc2:	602b      	str	r3, [r5, #0]
 8000dc4:	f7ff fb00 	bl	80003c8 <_sbrk>
 8000dc8:	1c43      	adds	r3, r0, #1
 8000dca:	d102      	bne.n	8000dd2 <_sbrk_r+0x1a>
 8000dcc:	682b      	ldr	r3, [r5, #0]
 8000dce:	b103      	cbz	r3, 8000dd2 <_sbrk_r+0x1a>
 8000dd0:	6023      	str	r3, [r4, #0]
 8000dd2:	bd38      	pop	{r3, r4, r5, pc}
 8000dd4:	200001c4 	.word	0x200001c4

08000dd8 <_init>:
 8000dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dda:	bf00      	nop
 8000ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dde:	bc08      	pop	{r3}
 8000de0:	469e      	mov	lr, r3
 8000de2:	4770      	bx	lr

08000de4 <_fini>:
 8000de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000de6:	bf00      	nop
 8000de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dea:	bc08      	pop	{r3}
 8000dec:	469e      	mov	lr, r3
 8000dee:	4770      	bx	lr
