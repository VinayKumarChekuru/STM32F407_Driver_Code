/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include<stdio.h>

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif



uint32_t *NVIC_Pri = (uint32_t*)0xE000E400; // priority register
uint32_t *NVIC_ISER = (uint32_t*)0xE000E100; //Interrupt set register
uint32_t *NVIC_ISPR = (uint32_t*)0XE000E200; //Interrupt pending regsiter

#define TIMER2         23
#define I2C1           20


void configure_interrupts(uint32_t IN, uint32_t Ipri)
{
	//Find the Priority register
	//Find the position of the priority register
    uint32_t Pr = IN/4;
    uint32_t pos = (IN%4)*8;
    uint32_t *ptr = NVIC_Pri + pr;
	ptr&= ~(0xFF<<pos);
    ptr|= (Ipri<<pos);
}

int main()
{
	configure_interrupts(TIMER2,01); //configure Tmer 1 interrupt
	configure_interrupts(I2C,2); //configure Tmer 1 interrupt
	//Set the interrupt
	NVIC_ISER |= (1<<TIMER);
	NVIC_ISER |= (1<<I2C);
	//Set pending register
	NVIC_ISPR |= (1<<TIMER); //pending the TIMER

}
