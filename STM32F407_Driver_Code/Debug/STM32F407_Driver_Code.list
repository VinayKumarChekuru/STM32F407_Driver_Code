
STM32F407_Driver_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005d8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000760  08000768  00001768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000760  08000760  00001768  2**0
                  CONTENTS
  4 .ARM          00000000  08000760  08000760  00001768  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000760  08000768  00001768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000760  08000760  00001760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000764  08000764  00001764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001768  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001768  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000663  00000000  00000000  00001792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000001db  00000000  00000000  00001df5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00001fd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000066  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001367  00000000  00000000  000020ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000c1e  00000000  00000000  00003435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000477e  00000000  00000000  00004053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000087d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000184  00000000  00000000  00008814  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  00008998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000748 	.word	0x08000748

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000748 	.word	0x08000748

080001c8 <GPIO_ClockControl>:
 *      Author: vinaykumar
 */
#include"GPIO_Driver.h"

void GPIO_ClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	460b      	mov	r3, r1
 80001d2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80001d4:	78fb      	ldrb	r3, [r7, #3]
 80001d6:	2b01      	cmp	r3, #1
 80001d8:	d162      	bne.n	80002a0 <GPIO_ClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a65      	ldr	r2, [pc, #404]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d106      	bne.n	80001f0 <GPIO_ClockControl+0x28>
		{
			GPIOA_Clk_En();
 80001e2:	4b65      	ldr	r3, [pc, #404]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 80001e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e6:	4a64      	ldr	r2, [pc, #400]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	6313      	str	r3, [r2, #48]	@ 0x30
		else if(pGPIOx == GPIOI)
				{
			GPIOI_Clk_DI();
				}
	}
}
 80001ee:	e0bc      	b.n	800036a <GPIO_ClockControl+0x1a2>
		else if(pGPIOx == GPIOB)
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	4a62      	ldr	r2, [pc, #392]	@ (800037c <GPIO_ClockControl+0x1b4>)
 80001f4:	4293      	cmp	r3, r2
 80001f6:	d106      	bne.n	8000206 <GPIO_ClockControl+0x3e>
			GPIOB_Clk_En();
 80001f8:	4b5f      	ldr	r3, [pc, #380]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fc:	4a5e      	ldr	r2, [pc, #376]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 80001fe:	f043 0302 	orr.w	r3, r3, #2
 8000202:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000204:	e0b1      	b.n	800036a <GPIO_ClockControl+0x1a2>
		else if(pGPIOx == GPIOC)
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4a5d      	ldr	r2, [pc, #372]	@ (8000380 <GPIO_ClockControl+0x1b8>)
 800020a:	4293      	cmp	r3, r2
 800020c:	d106      	bne.n	800021c <GPIO_ClockControl+0x54>
			GPIOC_Clk_En();
 800020e:	4b5a      	ldr	r3, [pc, #360]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 8000210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000212:	4a59      	ldr	r2, [pc, #356]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 8000214:	f043 0304 	orr.w	r3, r3, #4
 8000218:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800021a:	e0a6      	b.n	800036a <GPIO_ClockControl+0x1a2>
		else if(pGPIOx == GPIOD)
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	4a59      	ldr	r2, [pc, #356]	@ (8000384 <GPIO_ClockControl+0x1bc>)
 8000220:	4293      	cmp	r3, r2
 8000222:	d106      	bne.n	8000232 <GPIO_ClockControl+0x6a>
			GPIOD_Clk_En();
 8000224:	4b54      	ldr	r3, [pc, #336]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 8000226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000228:	4a53      	ldr	r2, [pc, #332]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 800022a:	f043 0308 	orr.w	r3, r3, #8
 800022e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000230:	e09b      	b.n	800036a <GPIO_ClockControl+0x1a2>
		else if(pGPIOx == GPIOE)
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a54      	ldr	r2, [pc, #336]	@ (8000388 <GPIO_ClockControl+0x1c0>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d106      	bne.n	8000248 <GPIO_ClockControl+0x80>
			GPIOE_Clk_En();
 800023a:	4b4f      	ldr	r3, [pc, #316]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 800023c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800023e:	4a4e      	ldr	r2, [pc, #312]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 8000240:	f043 0310 	orr.w	r3, r3, #16
 8000244:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000246:	e090      	b.n	800036a <GPIO_ClockControl+0x1a2>
		else if(pGPIOx == GPIOF)
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	4a50      	ldr	r2, [pc, #320]	@ (800038c <GPIO_ClockControl+0x1c4>)
 800024c:	4293      	cmp	r3, r2
 800024e:	d106      	bne.n	800025e <GPIO_ClockControl+0x96>
			GPIOF_Clk_En();
 8000250:	4b49      	ldr	r3, [pc, #292]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 8000252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000254:	4a48      	ldr	r2, [pc, #288]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 8000256:	f043 0320 	orr.w	r3, r3, #32
 800025a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800025c:	e085      	b.n	800036a <GPIO_ClockControl+0x1a2>
		else if(pGPIOx == GPIOG)
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	4a4b      	ldr	r2, [pc, #300]	@ (8000390 <GPIO_ClockControl+0x1c8>)
 8000262:	4293      	cmp	r3, r2
 8000264:	d106      	bne.n	8000274 <GPIO_ClockControl+0xac>
			GPIOG_Clk_En();
 8000266:	4b44      	ldr	r3, [pc, #272]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 8000268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800026a:	4a43      	ldr	r2, [pc, #268]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 800026c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000270:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000272:	e07a      	b.n	800036a <GPIO_ClockControl+0x1a2>
		else if(pGPIOx == GPIOH)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	4a47      	ldr	r2, [pc, #284]	@ (8000394 <GPIO_ClockControl+0x1cc>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d106      	bne.n	800028a <GPIO_ClockControl+0xc2>
			GPIOH_Clk_En();
 800027c:	4b3e      	ldr	r3, [pc, #248]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 800027e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000280:	4a3d      	ldr	r2, [pc, #244]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 8000282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000286:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000288:	e06f      	b.n	800036a <GPIO_ClockControl+0x1a2>
		else if(pGPIOx == GPIOI)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	4a42      	ldr	r2, [pc, #264]	@ (8000398 <GPIO_ClockControl+0x1d0>)
 800028e:	4293      	cmp	r3, r2
 8000290:	d16b      	bne.n	800036a <GPIO_ClockControl+0x1a2>
			GPIOI_Clk_En();
 8000292:	4b39      	ldr	r3, [pc, #228]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 8000294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000296:	4a38      	ldr	r2, [pc, #224]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 8000298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800029c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800029e:	e064      	b.n	800036a <GPIO_ClockControl+0x1a2>
	else if(pGPIOx == DISABLE)
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d161      	bne.n	800036a <GPIO_ClockControl+0x1a2>
		if(pGPIOx == GPIOA)
 80002a6:	687b      	ldr	r3, [r7, #4]
 80002a8:	4a32      	ldr	r2, [pc, #200]	@ (8000374 <GPIO_ClockControl+0x1ac>)
 80002aa:	4293      	cmp	r3, r2
 80002ac:	d106      	bne.n	80002bc <GPIO_ClockControl+0xf4>
			GPIOA_Clk_DI();
 80002ae:	4b32      	ldr	r3, [pc, #200]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 80002b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b2:	4a31      	ldr	r2, [pc, #196]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 80002b4:	f023 0301 	bic.w	r3, r3, #1
 80002b8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ba:	e056      	b.n	800036a <GPIO_ClockControl+0x1a2>
		else if(pGPIOx == GPIOB)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	4a2f      	ldr	r2, [pc, #188]	@ (800037c <GPIO_ClockControl+0x1b4>)
 80002c0:	4293      	cmp	r3, r2
 80002c2:	d106      	bne.n	80002d2 <GPIO_ClockControl+0x10a>
			GPIOB_Clk_DI();
 80002c4:	4b2c      	ldr	r3, [pc, #176]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 80002c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c8:	4a2b      	ldr	r2, [pc, #172]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 80002ca:	f023 0302 	bic.w	r3, r3, #2
 80002ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002d0:	e04b      	b.n	800036a <GPIO_ClockControl+0x1a2>
		else if(pGPIOx == GPIOC)
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	4a2a      	ldr	r2, [pc, #168]	@ (8000380 <GPIO_ClockControl+0x1b8>)
 80002d6:	4293      	cmp	r3, r2
 80002d8:	d106      	bne.n	80002e8 <GPIO_ClockControl+0x120>
			GPIOC_Clk_DI();
 80002da:	4b27      	ldr	r3, [pc, #156]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 80002dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002de:	4a26      	ldr	r2, [pc, #152]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 80002e0:	f023 0304 	bic.w	r3, r3, #4
 80002e4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002e6:	e040      	b.n	800036a <GPIO_ClockControl+0x1a2>
		else if(pGPIOx == GPIOD)
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	4a26      	ldr	r2, [pc, #152]	@ (8000384 <GPIO_ClockControl+0x1bc>)
 80002ec:	4293      	cmp	r3, r2
 80002ee:	d106      	bne.n	80002fe <GPIO_ClockControl+0x136>
			GPIOD_Clk_DI();
 80002f0:	4b21      	ldr	r3, [pc, #132]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f4:	4a20      	ldr	r2, [pc, #128]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 80002f6:	f023 0308 	bic.w	r3, r3, #8
 80002fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002fc:	e035      	b.n	800036a <GPIO_ClockControl+0x1a2>
		else if(pGPIOx == GPIOE)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	4a21      	ldr	r2, [pc, #132]	@ (8000388 <GPIO_ClockControl+0x1c0>)
 8000302:	4293      	cmp	r3, r2
 8000304:	d106      	bne.n	8000314 <GPIO_ClockControl+0x14c>
			GPIOE_Clk_DI();
 8000306:	4b1c      	ldr	r3, [pc, #112]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 8000308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030a:	4a1b      	ldr	r2, [pc, #108]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 800030c:	f023 0310 	bic.w	r3, r3, #16
 8000310:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000312:	e02a      	b.n	800036a <GPIO_ClockControl+0x1a2>
		else if(pGPIOx == GPIOF)
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	4a1d      	ldr	r2, [pc, #116]	@ (800038c <GPIO_ClockControl+0x1c4>)
 8000318:	4293      	cmp	r3, r2
 800031a:	d106      	bne.n	800032a <GPIO_ClockControl+0x162>
			GPIOF_Clk_DI();
 800031c:	4b16      	ldr	r3, [pc, #88]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 800031e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000320:	4a15      	ldr	r2, [pc, #84]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 8000322:	f023 0320 	bic.w	r3, r3, #32
 8000326:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000328:	e01f      	b.n	800036a <GPIO_ClockControl+0x1a2>
		else if(pGPIOx == GPIOG)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	4a18      	ldr	r2, [pc, #96]	@ (8000390 <GPIO_ClockControl+0x1c8>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d106      	bne.n	8000340 <GPIO_ClockControl+0x178>
			GPIOG_Clk_DI();
 8000332:	4b11      	ldr	r3, [pc, #68]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000336:	4a10      	ldr	r2, [pc, #64]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 8000338:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800033c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800033e:	e014      	b.n	800036a <GPIO_ClockControl+0x1a2>
		else if(pGPIOx == GPIOH)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	4a14      	ldr	r2, [pc, #80]	@ (8000394 <GPIO_ClockControl+0x1cc>)
 8000344:	4293      	cmp	r3, r2
 8000346:	d106      	bne.n	8000356 <GPIO_ClockControl+0x18e>
			GPIOH_Clk_DI();
 8000348:	4b0b      	ldr	r3, [pc, #44]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 800034a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800034c:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 800034e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000352:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000354:	e009      	b.n	800036a <GPIO_ClockControl+0x1a2>
		else if(pGPIOx == GPIOI)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4a0f      	ldr	r2, [pc, #60]	@ (8000398 <GPIO_ClockControl+0x1d0>)
 800035a:	4293      	cmp	r3, r2
 800035c:	d105      	bne.n	800036a <GPIO_ClockControl+0x1a2>
			GPIOI_Clk_DI();
 800035e:	4b06      	ldr	r3, [pc, #24]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 8000360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000362:	4a05      	ldr	r2, [pc, #20]	@ (8000378 <GPIO_ClockControl+0x1b0>)
 8000364:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000368:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr
 8000374:	40020000 	.word	0x40020000
 8000378:	40023800 	.word	0x40023800
 800037c:	40020400 	.word	0x40020400
 8000380:	40020800 	.word	0x40020800
 8000384:	40020c00 	.word	0x40020c00
 8000388:	40021000 	.word	0x40021000
 800038c:	40021400 	.word	0x40021400
 8000390:	40021800 	.word	0x40021800
 8000394:	40021c00 	.word	0x40021c00
 8000398:	40022000 	.word	0x40022000

0800039c <GPIO_Init>:
		uint8_t GPIO_PinMode,
		uint8_t GPIO_PinSpeed,
		uint8_t GPIO_PinPuPdControl,
		uint8_t GPIO_PinOPType,
		uint8_t GPIO_PinAltFunMode)
{
 800039c:	b480      	push	{r7}
 800039e:	b085      	sub	sp, #20
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	6078      	str	r0, [r7, #4]
 80003a4:	4608      	mov	r0, r1
 80003a6:	4611      	mov	r1, r2
 80003a8:	461a      	mov	r2, r3
 80003aa:	4603      	mov	r3, r0
 80003ac:	70fb      	strb	r3, [r7, #3]
 80003ae:	460b      	mov	r3, r1
 80003b0:	70bb      	strb	r3, [r7, #2]
 80003b2:	4613      	mov	r3, r2
 80003b4:	707b      	strb	r3, [r7, #1]
	//set mode of a GPIO pin
	uint32_t tempReg = 0;
 80003b6:	2300      	movs	r3, #0
 80003b8:	60fb      	str	r3, [r7, #12]
	tempReg |= (GPIO_PinMode << 2*GPIO_PinNumber);
 80003ba:	78ba      	ldrb	r2, [r7, #2]
 80003bc:	78fb      	ldrb	r3, [r7, #3]
 80003be:	005b      	lsls	r3, r3, #1
 80003c0:	fa02 f303 	lsl.w	r3, r2, r3
 80003c4:	461a      	mov	r2, r3
 80003c6:	68fb      	ldr	r3, [r7, #12]
 80003c8:	4313      	orrs	r3, r2
 80003ca:	60fb      	str	r3, [r7, #12]
    pGPIOX->MODER &= ~(3 << 2*GPIO_PinNumber); //It will claer the bit field of MOder
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	78fa      	ldrb	r2, [r7, #3]
 80003d2:	0052      	lsls	r2, r2, #1
 80003d4:	2103      	movs	r1, #3
 80003d6:	fa01 f202 	lsl.w	r2, r1, r2
 80003da:	43d2      	mvns	r2, r2
 80003dc:	401a      	ands	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	601a      	str	r2, [r3, #0]
    pGPIOX->MODER |= tempReg;
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681a      	ldr	r2, [r3, #0]
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	431a      	orrs	r2, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	601a      	str	r2, [r3, #0]

    //set GPIO pin speed
    tempReg = 0;
 80003ee:	2300      	movs	r3, #0
 80003f0:	60fb      	str	r3, [r7, #12]
    tempReg |= (GPIO_PinSpeed << 2*GPIO_PinNumber);
 80003f2:	787a      	ldrb	r2, [r7, #1]
 80003f4:	78fb      	ldrb	r3, [r7, #3]
 80003f6:	005b      	lsls	r3, r3, #1
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	461a      	mov	r2, r3
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	4313      	orrs	r3, r2
 8000402:	60fb      	str	r3, [r7, #12]
    pGPIOX->OSPEEDR &= ~(3 << 2*GPIO_PinNumber); //It will claer the bit field of MOder
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	689b      	ldr	r3, [r3, #8]
 8000408:	78fa      	ldrb	r2, [r7, #3]
 800040a:	0052      	lsls	r2, r2, #1
 800040c:	2103      	movs	r1, #3
 800040e:	fa01 f202 	lsl.w	r2, r1, r2
 8000412:	43d2      	mvns	r2, r2
 8000414:	401a      	ands	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	609a      	str	r2, [r3, #8]
    pGPIOX->OSPEEDR |= tempReg;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	689a      	ldr	r2, [r3, #8]
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	431a      	orrs	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	609a      	str	r2, [r3, #8]

    //set pull up pull down control

    tempReg = 0;
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
    tempReg |= (GPIO_PinPuPdControl << 2*GPIO_PinNumber);
 800042a:	7e3a      	ldrb	r2, [r7, #24]
 800042c:	78fb      	ldrb	r3, [r7, #3]
 800042e:	005b      	lsls	r3, r3, #1
 8000430:	fa02 f303 	lsl.w	r3, r2, r3
 8000434:	461a      	mov	r2, r3
 8000436:	68fb      	ldr	r3, [r7, #12]
 8000438:	4313      	orrs	r3, r2
 800043a:	60fb      	str	r3, [r7, #12]
    pGPIOX->PUPDR &= ~(3 << 2*GPIO_PinNumber); //It will claer the bit field of MOder
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	68db      	ldr	r3, [r3, #12]
 8000440:	78fa      	ldrb	r2, [r7, #3]
 8000442:	0052      	lsls	r2, r2, #1
 8000444:	2103      	movs	r1, #3
 8000446:	fa01 f202 	lsl.w	r2, r1, r2
 800044a:	43d2      	mvns	r2, r2
 800044c:	401a      	ands	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	60da      	str	r2, [r3, #12]
    pGPIOX->PUPDR |= tempReg;
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	68da      	ldr	r2, [r3, #12]
 8000456:	68fb      	ldr	r3, [r7, #12]
 8000458:	431a      	orrs	r2, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	60da      	str	r2, [r3, #12]


    //set Output type
    tempReg = 0;
 800045e:	2300      	movs	r3, #0
 8000460:	60fb      	str	r3, [r7, #12]
    tempReg |= ( GPIO_PinOPType << GPIO_PinNumber);
 8000462:	7f3a      	ldrb	r2, [r7, #28]
 8000464:	78fb      	ldrb	r3, [r7, #3]
 8000466:	fa02 f303 	lsl.w	r3, r2, r3
 800046a:	461a      	mov	r2, r3
 800046c:	68fb      	ldr	r3, [r7, #12]
 800046e:	4313      	orrs	r3, r2
 8000470:	60fb      	str	r3, [r7, #12]
    pGPIOX->OTYPER &= ~(1 << GPIO_PinNumber); //It will claer the bit field of MOder
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	685b      	ldr	r3, [r3, #4]
 8000476:	78fa      	ldrb	r2, [r7, #3]
 8000478:	2101      	movs	r1, #1
 800047a:	fa01 f202 	lsl.w	r2, r1, r2
 800047e:	43d2      	mvns	r2, r2
 8000480:	401a      	ands	r2, r3
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	605a      	str	r2, [r3, #4]
    pGPIOX->OTYPER |= tempReg;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	685a      	ldr	r2, [r3, #4]
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	431a      	orrs	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	605a      	str	r2, [r3, #4]


    //set alternate functionality

    if(GPIO_PinNumber <= 7)
 8000492:	78fb      	ldrb	r3, [r7, #3]
 8000494:	2b07      	cmp	r3, #7
 8000496:	d81c      	bhi.n	80004d2 <GPIO_Init+0x136>
    {
    	//alternate function low register
    	tempReg = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	60fb      	str	r3, [r7, #12]
    	tempReg |= (GPIO_PinAltFunMode  << 4*GPIO_PinNumber);
 800049c:	f897 2020 	ldrb.w	r2, [r7, #32]
 80004a0:	78fb      	ldrb	r3, [r7, #3]
 80004a2:	009b      	lsls	r3, r3, #2
 80004a4:	fa02 f303 	lsl.w	r3, r2, r3
 80004a8:	461a      	mov	r2, r3
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	4313      	orrs	r3, r2
 80004ae:	60fb      	str	r3, [r7, #12]
    	pGPIOX->AFRL &= ~(15 << GPIO_PinNumber); //It will claer the bit field of MOder
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	6a1b      	ldr	r3, [r3, #32]
 80004b4:	78fa      	ldrb	r2, [r7, #3]
 80004b6:	210f      	movs	r1, #15
 80004b8:	fa01 f202 	lsl.w	r2, r1, r2
 80004bc:	43d2      	mvns	r2, r2
 80004be:	401a      	ands	r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	621a      	str	r2, [r3, #32]
    	pGPIOX->AFRL |= tempReg;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	6a1a      	ldr	r2, [r3, #32]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	431a      	orrs	r2, r3
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	621a      	str	r2, [r3, #32]
    	pGPIOX->AFRH |= tempReg;
    }



}
 80004d0:	e01e      	b.n	8000510 <GPIO_Init+0x174>
    else if(GPIO_PinNumber > 7)
 80004d2:	78fb      	ldrb	r3, [r7, #3]
 80004d4:	2b07      	cmp	r3, #7
 80004d6:	d91b      	bls.n	8000510 <GPIO_Init+0x174>
    	tempReg = 0;
 80004d8:	2300      	movs	r3, #0
 80004da:	60fb      	str	r3, [r7, #12]
    	tempReg |= (GPIO_PinAltFunMode  << 4*GPIO_PinNumber);
 80004dc:	f897 2020 	ldrb.w	r2, [r7, #32]
 80004e0:	78fb      	ldrb	r3, [r7, #3]
 80004e2:	009b      	lsls	r3, r3, #2
 80004e4:	fa02 f303 	lsl.w	r3, r2, r3
 80004e8:	461a      	mov	r2, r3
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	60fb      	str	r3, [r7, #12]
    	pGPIOX->AFRH &= ~(15 << GPIO_PinNumber); //It will claer the bit field of MOder
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80004f4:	78fa      	ldrb	r2, [r7, #3]
 80004f6:	210f      	movs	r1, #15
 80004f8:	fa01 f202 	lsl.w	r2, r1, r2
 80004fc:	43d2      	mvns	r2, r2
 80004fe:	401a      	ands	r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	625a      	str	r2, [r3, #36]	@ 0x24
    	pGPIOX->AFRH |= tempReg;
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000508:	68fb      	ldr	r3, [r7, #12]
 800050a:	431a      	orrs	r2, r3
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8000510:	bf00      	nop
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	bc80      	pop	{r7}
 8000518:	4770      	bx	lr
	...

0800051c <GPIO_DeInit>:

void GPIO_DeInit(GPIO_RegDef_t *pGPIOX)
{
 800051c:	b480      	push	{r7}
 800051e:	b083      	sub	sp, #12
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
	if(pGPIOX == GPIOA)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	4a33      	ldr	r2, [pc, #204]	@ (80005f4 <GPIO_DeInit+0xd8>)
 8000528:	4293      	cmp	r3, r2
 800052a:	d106      	bne.n	800053a <GPIO_DeInit+0x1e>
	{
		RCC->AHB1RSTR |= (1<< 0);
 800052c:	4b32      	ldr	r3, [pc, #200]	@ (80005f8 <GPIO_DeInit+0xdc>)
 800052e:	691b      	ldr	r3, [r3, #16]
 8000530:	4a31      	ldr	r2, [pc, #196]	@ (80005f8 <GPIO_DeInit+0xdc>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	6113      	str	r3, [r2, #16]
	}
	else if(pGPIOX == GPIOI)
	{
		RCC->AHB1RSTR |= (1<< 8);
	}
}
 8000538:	e056      	b.n	80005e8 <GPIO_DeInit+0xcc>
	else if(pGPIOX == GPIOB)
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4a2f      	ldr	r2, [pc, #188]	@ (80005fc <GPIO_DeInit+0xe0>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d106      	bne.n	8000550 <GPIO_DeInit+0x34>
		RCC->AHB1RSTR |= (1<< 1);
 8000542:	4b2d      	ldr	r3, [pc, #180]	@ (80005f8 <GPIO_DeInit+0xdc>)
 8000544:	691b      	ldr	r3, [r3, #16]
 8000546:	4a2c      	ldr	r2, [pc, #176]	@ (80005f8 <GPIO_DeInit+0xdc>)
 8000548:	f043 0302 	orr.w	r3, r3, #2
 800054c:	6113      	str	r3, [r2, #16]
}
 800054e:	e04b      	b.n	80005e8 <GPIO_DeInit+0xcc>
	else if(pGPIOX == GPIOC)
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	4a2b      	ldr	r2, [pc, #172]	@ (8000600 <GPIO_DeInit+0xe4>)
 8000554:	4293      	cmp	r3, r2
 8000556:	d106      	bne.n	8000566 <GPIO_DeInit+0x4a>
		RCC->AHB1RSTR |= (1<< 2);
 8000558:	4b27      	ldr	r3, [pc, #156]	@ (80005f8 <GPIO_DeInit+0xdc>)
 800055a:	691b      	ldr	r3, [r3, #16]
 800055c:	4a26      	ldr	r2, [pc, #152]	@ (80005f8 <GPIO_DeInit+0xdc>)
 800055e:	f043 0304 	orr.w	r3, r3, #4
 8000562:	6113      	str	r3, [r2, #16]
}
 8000564:	e040      	b.n	80005e8 <GPIO_DeInit+0xcc>
	else if(pGPIOX == GPIOD)
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	4a26      	ldr	r2, [pc, #152]	@ (8000604 <GPIO_DeInit+0xe8>)
 800056a:	4293      	cmp	r3, r2
 800056c:	d106      	bne.n	800057c <GPIO_DeInit+0x60>
		RCC->AHB1RSTR |= (1<< 3);
 800056e:	4b22      	ldr	r3, [pc, #136]	@ (80005f8 <GPIO_DeInit+0xdc>)
 8000570:	691b      	ldr	r3, [r3, #16]
 8000572:	4a21      	ldr	r2, [pc, #132]	@ (80005f8 <GPIO_DeInit+0xdc>)
 8000574:	f043 0308 	orr.w	r3, r3, #8
 8000578:	6113      	str	r3, [r2, #16]
}
 800057a:	e035      	b.n	80005e8 <GPIO_DeInit+0xcc>
	else if(pGPIOX == GPIOE)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	4a22      	ldr	r2, [pc, #136]	@ (8000608 <GPIO_DeInit+0xec>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d106      	bne.n	8000592 <GPIO_DeInit+0x76>
		RCC->AHB1RSTR |= (1<< 4);
 8000584:	4b1c      	ldr	r3, [pc, #112]	@ (80005f8 <GPIO_DeInit+0xdc>)
 8000586:	691b      	ldr	r3, [r3, #16]
 8000588:	4a1b      	ldr	r2, [pc, #108]	@ (80005f8 <GPIO_DeInit+0xdc>)
 800058a:	f043 0310 	orr.w	r3, r3, #16
 800058e:	6113      	str	r3, [r2, #16]
}
 8000590:	e02a      	b.n	80005e8 <GPIO_DeInit+0xcc>
	else if(pGPIOX == GPIOF)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4a1d      	ldr	r2, [pc, #116]	@ (800060c <GPIO_DeInit+0xf0>)
 8000596:	4293      	cmp	r3, r2
 8000598:	d106      	bne.n	80005a8 <GPIO_DeInit+0x8c>
		RCC->AHB1RSTR |= (1<< 5);
 800059a:	4b17      	ldr	r3, [pc, #92]	@ (80005f8 <GPIO_DeInit+0xdc>)
 800059c:	691b      	ldr	r3, [r3, #16]
 800059e:	4a16      	ldr	r2, [pc, #88]	@ (80005f8 <GPIO_DeInit+0xdc>)
 80005a0:	f043 0320 	orr.w	r3, r3, #32
 80005a4:	6113      	str	r3, [r2, #16]
}
 80005a6:	e01f      	b.n	80005e8 <GPIO_DeInit+0xcc>
	else if(pGPIOX == GPIOG)
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4a19      	ldr	r2, [pc, #100]	@ (8000610 <GPIO_DeInit+0xf4>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d106      	bne.n	80005be <GPIO_DeInit+0xa2>
		RCC->AHB1RSTR |= (1<< 6);
 80005b0:	4b11      	ldr	r3, [pc, #68]	@ (80005f8 <GPIO_DeInit+0xdc>)
 80005b2:	691b      	ldr	r3, [r3, #16]
 80005b4:	4a10      	ldr	r2, [pc, #64]	@ (80005f8 <GPIO_DeInit+0xdc>)
 80005b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005ba:	6113      	str	r3, [r2, #16]
}
 80005bc:	e014      	b.n	80005e8 <GPIO_DeInit+0xcc>
	else if(pGPIOX == GPIOH)
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4a14      	ldr	r2, [pc, #80]	@ (8000614 <GPIO_DeInit+0xf8>)
 80005c2:	4293      	cmp	r3, r2
 80005c4:	d106      	bne.n	80005d4 <GPIO_DeInit+0xb8>
		RCC->AHB1RSTR |= (1<< 7);
 80005c6:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <GPIO_DeInit+0xdc>)
 80005c8:	691b      	ldr	r3, [r3, #16]
 80005ca:	4a0b      	ldr	r2, [pc, #44]	@ (80005f8 <GPIO_DeInit+0xdc>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6113      	str	r3, [r2, #16]
}
 80005d2:	e009      	b.n	80005e8 <GPIO_DeInit+0xcc>
	else if(pGPIOX == GPIOI)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a10      	ldr	r2, [pc, #64]	@ (8000618 <GPIO_DeInit+0xfc>)
 80005d8:	4293      	cmp	r3, r2
 80005da:	d105      	bne.n	80005e8 <GPIO_DeInit+0xcc>
		RCC->AHB1RSTR |= (1<< 8);
 80005dc:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <GPIO_DeInit+0xdc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a05      	ldr	r2, [pc, #20]	@ (80005f8 <GPIO_DeInit+0xdc>)
 80005e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005e6:	6113      	str	r3, [r2, #16]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bc80      	pop	{r7}
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40020000 	.word	0x40020000
 80005f8:	40023800 	.word	0x40023800
 80005fc:	40020400 	.word	0x40020400
 8000600:	40020800 	.word	0x40020800
 8000604:	40020c00 	.word	0x40020c00
 8000608:	40021000 	.word	0x40021000
 800060c:	40021400 	.word	0x40021400
 8000610:	40021800 	.word	0x40021800
 8000614:	40021c00 	.word	0x40021c00
 8000618:	40022000 	.word	0x40022000

0800061c <GPIO_WriteToOut_Pin>:
	value  = pGPIOx->IDR ;
	return value;
}

void GPIO_WriteToOut_Pin(GPIO_RegDef_t *pGPIOx,uint8_t Pin_Num,uint8_t value)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
 8000624:	460b      	mov	r3, r1
 8000626:	70fb      	strb	r3, [r7, #3]
 8000628:	4613      	mov	r3, r2
 800062a:	70bb      	strb	r3, [r7, #2]
	if(value == 1)
 800062c:	78bb      	ldrb	r3, [r7, #2]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d109      	bne.n	8000646 <GPIO_WriteToOut_Pin+0x2a>
	{
		pGPIOx->ODR |= (value << Pin_Num);
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	695b      	ldr	r3, [r3, #20]
 8000636:	78b9      	ldrb	r1, [r7, #2]
 8000638:	78fa      	ldrb	r2, [r7, #3]
 800063a:	fa01 f202 	lsl.w	r2, r1, r2
 800063e:	431a      	orrs	r2, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	615a      	str	r2, [r3, #20]
	}
	else if(value == 0)
	{
		pGPIOx->ODR &= ~(value << Pin_Num);
	}
}
 8000644:	e00c      	b.n	8000660 <GPIO_WriteToOut_Pin+0x44>
	else if(value == 0)
 8000646:	78bb      	ldrb	r3, [r7, #2]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d109      	bne.n	8000660 <GPIO_WriteToOut_Pin+0x44>
		pGPIOx->ODR &= ~(value << Pin_Num);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	695b      	ldr	r3, [r3, #20]
 8000650:	78b9      	ldrb	r1, [r7, #2]
 8000652:	78fa      	ldrb	r2, [r7, #3]
 8000654:	fa01 f202 	lsl.w	r2, r1, r2
 8000658:	43d2      	mvns	r2, r2
 800065a:	401a      	ands	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	615a      	str	r2, [r3, #20]
}
 8000660:	bf00      	nop
 8000662:	370c      	adds	r7, #12
 8000664:	46bd      	mov	sp, r7
 8000666:	bc80      	pop	{r7}
 8000668:	4770      	bx	lr
	...

0800066c <main>:
#endif

#include"GPIO_Driver.h"

int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af04      	add	r7, sp, #16
	GPIO_ClockControl(GPIOA, ENABLE);
 8000672:	2101      	movs	r1, #1
 8000674:	480c      	ldr	r0, [pc, #48]	@ (80006a8 <main+0x3c>)
 8000676:	f7ff fda7 	bl	80001c8 <GPIO_ClockControl>
	 * GPIO_HIGH_SPEED
	 * GPIO_PU
	 * GPIO_PUSHPULL
	 * GPIO_AF1
	 */
	GPIO_Init(GPIOA, GPIO_PIN_0, GPIO_MODE_OUT,GPIO_HIGH_SPEED , GPIO_PU, GPIO_PUSHPULL, GPIO_AF1);
 800067a:	2301      	movs	r3, #1
 800067c:	9302      	str	r3, [sp, #8]
 800067e:	2300      	movs	r3, #0
 8000680:	9301      	str	r3, [sp, #4]
 8000682:	2301      	movs	r3, #1
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2302      	movs	r3, #2
 8000688:	2201      	movs	r2, #1
 800068a:	2100      	movs	r1, #0
 800068c:	4806      	ldr	r0, [pc, #24]	@ (80006a8 <main+0x3c>)
 800068e:	f7ff fe85 	bl	800039c <GPIO_Init>
	GPIO_WriteToOut_Pin(GPIOA, GPIO_PIN_6,ENABLE);
 8000692:	2201      	movs	r2, #1
 8000694:	2106      	movs	r1, #6
 8000696:	4804      	ldr	r0, [pc, #16]	@ (80006a8 <main+0x3c>)
 8000698:	f7ff ffc0 	bl	800061c <GPIO_WriteToOut_Pin>
    GPIO_DeInit(GPIOA);
 800069c:	4802      	ldr	r0, [pc, #8]	@ (80006a8 <main+0x3c>)
 800069e:	f7ff ff3d 	bl	800051c <GPIO_DeInit>
    /* Loop forever */
	for(;;);
 80006a2:	bf00      	nop
 80006a4:	e7fd      	b.n	80006a2 <main+0x36>
 80006a6:	bf00      	nop
 80006a8:	40020000 	.word	0x40020000

080006ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006ac:	480d      	ldr	r0, [pc, #52]	@ (80006e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006b0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b4:	480c      	ldr	r0, [pc, #48]	@ (80006e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b6:	490d      	ldr	r1, [pc, #52]	@ (80006ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b8:	4a0d      	ldr	r2, [pc, #52]	@ (80006f0 <LoopForever+0xe>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006bc:	e002      	b.n	80006c4 <LoopCopyDataInit>

080006be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c2:	3304      	adds	r3, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c8:	d3f9      	bcc.n	80006be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ca:	4a0a      	ldr	r2, [pc, #40]	@ (80006f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006cc:	4c0a      	ldr	r4, [pc, #40]	@ (80006f8 <LoopForever+0x16>)
  movs r3, #0
 80006ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d0:	e001      	b.n	80006d6 <LoopFillZerobss>

080006d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d4:	3204      	adds	r2, #4

080006d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d8:	d3fb      	bcc.n	80006d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006da:	f000 f811 	bl	8000700 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006de:	f7ff ffc5 	bl	800066c <main>

080006e2 <LoopForever>:

LoopForever:
  b LoopForever
 80006e2:	e7fe      	b.n	80006e2 <LoopForever>
  ldr   r0, =_estack
 80006e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80006f0:	08000768 	.word	0x08000768
  ldr r2, =_sbss
 80006f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80006f8:	2000001c 	.word	0x2000001c

080006fc <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006fc:	e7fe      	b.n	80006fc <ADC_IRQHandler>
	...

08000700 <__libc_init_array>:
 8000700:	b570      	push	{r4, r5, r6, lr}
 8000702:	4d0d      	ldr	r5, [pc, #52]	@ (8000738 <__libc_init_array+0x38>)
 8000704:	4c0d      	ldr	r4, [pc, #52]	@ (800073c <__libc_init_array+0x3c>)
 8000706:	1b64      	subs	r4, r4, r5
 8000708:	10a4      	asrs	r4, r4, #2
 800070a:	2600      	movs	r6, #0
 800070c:	42a6      	cmp	r6, r4
 800070e:	d109      	bne.n	8000724 <__libc_init_array+0x24>
 8000710:	4d0b      	ldr	r5, [pc, #44]	@ (8000740 <__libc_init_array+0x40>)
 8000712:	4c0c      	ldr	r4, [pc, #48]	@ (8000744 <__libc_init_array+0x44>)
 8000714:	f000 f818 	bl	8000748 <_init>
 8000718:	1b64      	subs	r4, r4, r5
 800071a:	10a4      	asrs	r4, r4, #2
 800071c:	2600      	movs	r6, #0
 800071e:	42a6      	cmp	r6, r4
 8000720:	d105      	bne.n	800072e <__libc_init_array+0x2e>
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f855 3b04 	ldr.w	r3, [r5], #4
 8000728:	4798      	blx	r3
 800072a:	3601      	adds	r6, #1
 800072c:	e7ee      	b.n	800070c <__libc_init_array+0xc>
 800072e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000732:	4798      	blx	r3
 8000734:	3601      	adds	r6, #1
 8000736:	e7f2      	b.n	800071e <__libc_init_array+0x1e>
 8000738:	08000760 	.word	0x08000760
 800073c:	08000760 	.word	0x08000760
 8000740:	08000760 	.word	0x08000760
 8000744:	08000764 	.word	0x08000764

08000748 <_init>:
 8000748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800074a:	bf00      	nop
 800074c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800074e:	bc08      	pop	{r3}
 8000750:	469e      	mov	lr, r3
 8000752:	4770      	bx	lr

08000754 <_fini>:
 8000754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000756:	bf00      	nop
 8000758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800075a:	bc08      	pop	{r3}
 800075c:	469e      	mov	lr, r3
 800075e:	4770      	bx	lr
